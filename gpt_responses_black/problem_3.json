{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: bytearray. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "def manipulate_bytearray(byte_list):\n    # Convert a list of integers into a bytearray\n    bytes_data = bytearray(byte_list)\n    \n    # Perform some operations on bytearray\n    # For example, let's invert the bits of each byte\n    for i in range(len(bytes_data)):\n        bytes_data[i] ^= 0xFF  # XOR with 0xFF to invert the bits\n    \n    # Return the modified bytearray\n    return bytes_data\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    original_list = [1, 2, 3, 255]\n    result = manipulate_bytearray(original_list)\n    print(\"Original list:\", original_list)\n    print(\"Modified bytearray:\", result)\n",
    "tags": [
        "bytearray",
        "Easy"
    ],
    "keywords": [
        "bytearray"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "black"
}