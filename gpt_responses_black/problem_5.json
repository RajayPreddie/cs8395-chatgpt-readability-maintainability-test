{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: ChainMap. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "from collections import ChainMap\n\ndef merge_and_display_info(default_info, custom_info):\n    # Merge dictionaries using ChainMap, giving precedence to custom_info\n    combined_info = ChainMap(custom_info, default_info)\n    \n    # Generate a list of formatted info strings\n    info_list = [\n        f\"{key}: {value}\" for key, value in combined_info.items()\n    ]\n    \n    # Display the combined information\n    for info in info_list:\n        print(info)\n\n# Default information that can be overridden by custom information\ndefault_info = {\n    \"name\": \"John Doe\",\n    \"email\": \"johndoe@example.com\",\n    \"age\": \"Unknown\",\n}\n\n# Custom information provided by the user\ncustom_info = {\n    \"name\": \"Jane Smith\",\n    \"age\": 28,\n}\n\n# Call the function to merge and display the information\nmerge_and_display_info(default_info, custom_info)\n",
    "tags": [
        "ChainMap",
        "Easy"
    ],
    "keywords": [
        "ChainMap"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "black"
}