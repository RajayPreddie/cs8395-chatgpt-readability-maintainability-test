{
    "id": "problem_19",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Global state,heapq,IdiomaticPython. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import heapq\n\n# Global state to maintain our heap\nheap = []\n\ndef add_to_heap(item):\n    # Using heapq to maintain a heap invariant\n    heapq.heappush(heap, item)\n\ndef get_smallest():\n    # Popping the smallest item from the heap\n    return heapq.heappop(heap) if heap else None\n\ndef get_heap():\n    # Returning a sorted list from the heap without altering the heap\n    return sorted(heap)\n\n# Idiomatic Python function to handle heap operations\ndef main():\n    # Add some items to the heap\n    add_to_heap(10)\n    add_to_heap(5)\n    add_to_heap(15)\n    add_to_heap(1)\n\n    # Get and print the smallest item\n    print(f\"The smallest item is: {get_smallest()}\")\n\n    # Get and print the current heap\n    print(f\"The current heap is: {get_heap()}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}