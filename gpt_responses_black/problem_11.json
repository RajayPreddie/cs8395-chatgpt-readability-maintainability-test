{
    "id": "problem_11",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Decorator,DefaultDict. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "from collections import defaultdict\nfrom functools import wraps\n\n# Decorator to count function calls\ndef call_counter(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        wrapper.calls += 1\n        return func(*args, **kwargs)\n    \n    wrapper.calls = 0\n    return wrapper\n\n# Function to add an element to a defaultdict list\n@call_counter\ndef add_to_list(d, key, value):\n    d[key].append(value)\n\n# Main program\nif __name__ == \"__main__\":\n    # Create a defaultdict with list as the default factory\n    dd_list = defaultdict(list)\n    \n    # Add some items to the list\n    add_to_list(dd_list, 'fruits', 'apple')\n    add_to_list(dd_list, 'fruits', 'banana')\n    add_to_list(dd_list, 'vegetables', 'carrot')\n    \n    # Print the defaultdict list\n    for key, values in dd_list.items():\n        print(f\"{key.title()}: {', '.join(values)}\")\n    \n    # Print the number of times the add_to_list function was called\n    print(f\"Function add_to_list was called {add_to_list.calls} times.\")\n",
    "tags": [
        "Decorator",
        "DefaultDict",
        "Medium"
    ],
    "keywords": [
        "Decorator",
        "DefaultDict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "black"
}