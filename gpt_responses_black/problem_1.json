{
    "id": "problem_1",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: list,asyncio,bytearray. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import asyncio\n\n# Function to convert strings in a list to bytearrays\nasync def convert_to_bytearrays(string_list):\n    # Create an empty list to hold the bytearrays\n    bytearray_list = []\n    \n    # Iterate over each string in the list\n    for item in string_list:\n        # Convert the string to a bytearray and append to the list\n        bytearray_list.append(bytearray(item, 'utf-8'))\n        \n    return bytearray_list\n\n# Async main function to demonstrate the use of the convert_to_bytearrays function\nasync def main():\n    # Define a list of strings\n    names = [\"Alice\", \"Bob\", \"Charlie\"]\n    \n    # Convert the list of strings to a list of bytearrays\n    bytearrays = await convert_to_bytearrays(names)\n    \n    # Print the list of bytearrays\n    for ba in bytearrays:\n        print(ba)\n\n# Run the async main function using asyncio.run if this is the main module\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "list",
        "asyncio",
        "bytearray",
        "Hard"
    ],
    "keywords": [
        "list",
        "asyncio",
        "bytearray"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}