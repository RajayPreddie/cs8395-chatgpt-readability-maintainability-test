{
    "id": "problem_17",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: GarbageCollection,Generator,Global state. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import gc\n\n\ndef garbage_collection_status():\n    \"\"\"Check the status of the garbage collection.\"\"\"\n    gc_enabled = gc.isenabled()\n    return f\"Garbage Collection Enabled: {gc_enabled}\"\n\n\ndef generate_numbers(limit):\n    \"\"\"A generator function that yields numbers up to a limit.\"\"\"\n    for number in range(limit):\n        yield number\n\n\nglobal_state = {\"count\": 0}\n\n\ndef increment_global_count():\n    \"\"\"Increment the global count by 1.\"\"\"\n    global_state[\"count\"] += 1\n\n\ndef main():\n    # Enable garbage collection\n    gc.enable()\n\n    # Print the garbage collection status\n    print(garbage_collection_status())\n\n    # Use a generator to create a list of numbers\n    limit = 10\n    number_list = list(generate_numbers(limit))\n    print(f\"Generated list of numbers up to {limit}: {number_list}\")\n\n    # Increment the global count and print it\n    increment_global_count()\n    print(f\"Global count after increment: {global_state['count']}\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}