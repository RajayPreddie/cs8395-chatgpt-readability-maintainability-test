{
    "id": "problem_15",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: dict,frozenset. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "def create_frozenset_of_dicts(list_of_dicts):\n    \"\"\"\n    This function takes a list of dictionaries and returns a frozenset\n    containing immutable versions of those dictionaries.\n    \"\"\"\n    # Convert each dictionary in the list to a frozenset of items\n    # to make them hashable and suitable for being in a frozenset\n    immutable_dicts = (frozenset(d.items()) for d in list_of_dicts)\n    \n    # Return a frozenset of these immutable dictionary representations\n    return frozenset(immutable_dicts)\n\n# Example usage:\nif __name__ == \"__main__\":\n    list_of_dicts = [\n        {\"name\": \"Alice\", \"age\": 30},\n        {\"name\": \"Bob\", \"age\": 25},\n        {\"name\": \"Charlie\", \"age\": 35},\n    ]\n\n    result = create_frozenset_of_dicts(list_of_dicts)\n    for item in result:\n        print(dict(item))  # Convert back to dict for readable printing\n",
    "tags": [
        "dict",
        "frozenset",
        "Medium"
    ],
    "keywords": [
        "dict",
        "frozenset"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "black"
}