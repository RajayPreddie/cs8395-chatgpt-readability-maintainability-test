{
    "id": "problem_2",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: asyncio. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import asyncio\n\n# Define an asynchronous function to process items in a list\nasync def process_item(item):\n    # Simulate a processing task that takes time with asyncio.sleep\n    await asyncio.sleep(1)\n    print(f\"Processed {item}\")\n\n# Define the main asynchronous function that will use a list\nasync def process_list(item_list):\n    # Create a list of tasks for processing each item in the list\n    tasks = [process_item(item) for item in item_list]\n    # Wait until all tasks are completed\n    await asyncio.gather(*tasks)\n\n# Define the entry point of the program\nif __name__ == \"__main__\":\n    # Define a list of items to be processed\n    items_to_process = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\"]\n\n    # Run the asyncio event loop to process the list\n    asyncio.run(process_list(items_to_process))\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "black"
}