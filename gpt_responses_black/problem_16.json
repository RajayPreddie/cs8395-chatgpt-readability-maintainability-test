{
    "id": "problem_16",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: frozenset,GarbageCollection. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import gc\n\ndef manage_garbage_collection():\n    # Disable automatic garbage collection to manage it manually\n    gc.disable()\n\n    # Some example data that could create reference cycles\n    my_list = [1, 2, 3, 4]\n    my_list.append(my_list)\n\n    # Convert the list to a frozenset to ensure immutability\n    immutable_data = frozenset(my_list)\n\n    # Print the frozenset\n    print(\"Immutable data:\", immutable_data)\n\n    # Perform garbage collection manually\n    collected_items = gc.collect()\n    print(f\"Garbage collector: collected {collected_items} objects.\")\n\n    # Re-enable automatic garbage collection\n    gc.enable()\n\n# Run the garbage collection management function\nif __name__ == \"__main__\":\n    manage_garbage_collection()\n",
    "tags": [
        "frozenset",
        "GarbageCollection",
        "Medium"
    ],
    "keywords": [
        "frozenset",
        "GarbageCollection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "black"
}