{
    "id": "problem_19",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Global state,heapq,IdiomaticPython. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating adherence to pylint standards with heapq.\n\nThis module provides an example function using the heapq module to manage a heap\nwhile avoiding global state for idiomatic Python practices.\n\"\"\"\n\nimport heapq\n\ndef add_to_heap(heap, item):\n    \"\"\"Add an item to the heap and return the updated heap.\n\n    Args:\n        heap: A list representing the heap.\n        item: The item to be added to the heap.\n\n    Returns:\n        A list representing the heap after the item has been added.\n    \"\"\"\n    heapq.heappush(heap, item)\n    return heap\n\ndef get_smallest(heap):\n    \"\"\"Return the smallest item from the heap.\n\n    Args:\n        heap: A list representing the heap.\n\n    Returns:\n        The smallest item from the heap.\n    \"\"\"\n    return heap[0] if heap else None\n\ndef remove_smallest(heap):\n    \"\"\"Remove and return the smallest item from the heap.\n\n    Args:\n        heap: A list representing the heap.\n\n    Returns:\n        The smallest item from the heap after removing it.\n    \"\"\"\n    if heap:\n        return heapq.heappop(heap)\n    return None\n\n# Example usage\nif __name__ == \"__main__\":\n    # Initialize an empty heap\n    my_heap = []\n\n    # Add items to the heap\n    my_heap = add_to_heap(my_heap, 10)\n    my_heap = add_to_heap(my_heap, 5)\n    my_heap = add_to_heap(my_heap, 8)\n\n    # Get the smallest item\n    print(f\"The smallest item in the heap is: {get_smallest(my_heap)}\")\n\n    # Remove the smallest item\n    smallest_item = remove_smallest(my_heap)\n    print(f\"Removed the smallest item: {smallest_item}\")\n\n    # Show the heap after removing the smallest item\n    print(f\"Heap after removing the smallest item: {my_heap}\")\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}