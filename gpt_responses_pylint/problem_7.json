{
    "id": "problem_7",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Concurrency. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating concurrency in Python.\n\nThis module provides an example function that uses threading for concurrent execution.\n\"\"\"\n\nimport threading\n\ndef worker(number, results, index):\n    \"\"\"Thread worker function that computes the square of a number and stores it.\"\"\"\n    # Compute the square of the provided number\n    results[index] = number * number\n\ndef concurrent_squares(numbers):\n    \"\"\"Calculate the squares of a list of numbers concurrently.\"\"\"\n    threads = []\n    results = [None] * len(numbers)\n\n    # Create and start a thread for each number to calculate its square\n    for i, number in enumerate(numbers):\n        thread = threading.Thread(target=worker, args=(number, results, i))\n        threads.append(thread)\n        thread.start()\n\n    # Wait for all threads to complete\n    for thread in threads:\n        thread.join()\n\n    return results\n\n# Example usage\nif __name__ == \"__main__\":\n    NUMBERS = [1, 2, 3, 4, 5]\n    squares = concurrent_squares(NUMBERS)\n    print(f\"Squares: {squares}\")\n```\n",
    "tags": [
        "Concurrency",
        "Easy"
    ],
    "keywords": [
        "Concurrency"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}