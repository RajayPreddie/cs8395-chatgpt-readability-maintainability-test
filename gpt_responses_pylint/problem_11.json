{
    "id": "problem_11",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Decorator,DefaultDict. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "from collections import defaultdict\n\n# Decorator to print the result of the function it decorates\ndef print_result(func):\n    \"\"\"Decorator to print the function result.\"\"\"\n    def wrapper(*args, **kwargs):\n        result = func(*args, **kwargs)\n        print(f\"The result is: {result}\")\n        return result\n    return wrapper\n\n@print_result\ndef count_elements_in_list(input_list):\n    \"\"\"Count occurrences of each element in the given list using a defaultdict.\"\"\"\n    element_count = defaultdict(int)\n    for element in input_list:\n        element_count[element] += 1\n    return element_count\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n    count_elements_in_list(example_list)\n",
    "tags": [
        "Decorator",
        "DefaultDict",
        "Medium"
    ],
    "keywords": [
        "Decorator",
        "DefaultDict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pylint"
}