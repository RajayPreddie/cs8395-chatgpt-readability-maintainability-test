{
    "id": "problem_10",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Counter. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating the use of Counter from collections.\n\nThis module provides a function that counts the frequency of elements in a list\nusing the Counter class from the collections module.\n\"\"\"\n\nfrom collections import Counter\n\ndef count_elements(input_list):\n    \"\"\"\n    Count the frequency of each element in the given list.\n\n    Args:\n        input_list: A list of elements to be counted.\n\n    Returns:\n        A Counter object with the frequency of each element.\n    \"\"\"\n    return Counter(input_list)\n\n# Example usage:\n# if __name__ == \"__main__\":\n#     example_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n#     element_counts = count_elements(example_list)\n#     print(element_counts)\n",
    "tags": [
        "Counter",
        "Easy"
    ],
    "keywords": [
        "Counter"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}