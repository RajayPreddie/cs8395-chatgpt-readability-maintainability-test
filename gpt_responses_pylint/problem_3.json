{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: bytearray. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating bytearray usage in Python.\n\nThis module provides a function that manipulates a bytearray and returns the modified bytearray.\n\"\"\"\n\ndef manipulate_bytearray(byte_list):\n    \"\"\"\n    Perform various operations on a bytearray and return the result.\n\n    Args:\n    byte_list: A list of integers (0-255) to be converted to a bytearray.\n\n    Returns:\n    A modified bytearray after performing operations.\n    \"\"\"\n    # Convert the list of integers to a bytearray\n    bytes_obj = bytearray(byte_list)\n\n    # Perform operations on the bytearray\n    # For example, let's invert the bits of each byte\n    for i in range(len(bytes_obj)):\n        bytes_obj[i] = 255 - bytes_obj[i]\n\n    return bytes_obj\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Initial list of integers\n    initial_list = [0, 127, 255]\n\n    # Call the manipulate_bytearray function\n    result = manipulate_bytearray(initial_list)\n\n    # Print the resulting bytearray\n    print(\"Resulting bytearray:\", result)\n",
    "tags": [
        "bytearray",
        "Easy"
    ],
    "keywords": [
        "bytearray"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}