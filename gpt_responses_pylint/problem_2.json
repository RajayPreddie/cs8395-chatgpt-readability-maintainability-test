{
    "id": "problem_2",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: asyncio. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating asyncio usage in Python with pylint standards.\n\nThis module provides an example function that uses asyncio to work with lists.\n\"\"\"\n\nimport asyncio\n\nasync def process_data(data_list):\n    \"\"\"Asynchronously process data in the list by doubling each element.\"\"\"\n    processed_data = [data * 2 for data in data_list]\n    await asyncio.sleep(1)  # Simulating an asynchronous I/O operation\n    return processed_data\n\nasync def main():\n    \"\"\"Main function to run asyncio tasks.\"\"\"\n    original_data = [1, 2, 3, 4, 5]\n    print('Original data:', original_data)\n\n    processed_data = await process_data(original_data)\n    print('Processed data:', processed_data)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}