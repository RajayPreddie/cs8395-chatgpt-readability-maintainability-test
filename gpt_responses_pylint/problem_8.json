{
    "id": "problem_8",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: ContextManager. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating pylint adherence with ContextManager usage.\n\nThis module provides an example class that implements a context manager to work with a list.\n\"\"\"\n\nclass ListManager:\n    \"\"\"Context Manager class for managing a list.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the context manager with an empty list.\"\"\"\n        self.items = []\n\n    def __enter__(self):\n        \"\"\"Enter the runtime context and return the object itself.\"\"\"\n        return self\n\n    def add_item(self, item):\n        \"\"\"Add an item to the list.\"\"\"\n        self.items.append(item)\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"Exit the runtime context and handle any exception if necessary.\"\"\"\n        if exc_type is not None:\n            print(f\"An error occurred: {exc_value}\")\n        return False  # Propagate exceptions\n\ndef main():\n    \"\"\"Main function to demonstrate usage of ListManager context manager.\"\"\"\n    with ListManager() as manager:\n        manager.add_item('apple')\n        manager.add_item('banana')\n        manager.add_item('cherry')\n        print(manager.items)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ContextManager",
        "Easy"
    ],
    "keywords": [
        "ContextManager"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}