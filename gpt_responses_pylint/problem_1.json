{
    "id": "problem_1",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: list. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating pylint adherence with list usage.\n\nThis module provides an example function that uses a list to store and manipulate data.\n\"\"\"\n\ndef list_average(numbers):\n    \"\"\"Calculate and return the average of a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers (integers or floats).\n\n    Returns:\n        float: The average of the numbers in the list.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0\n    return sum(numbers) / len(numbers)\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_list = [10, 20, 30, 40, 50]\n    average = list_average(sample_list)\n    print(f\"The average is: {average}\")\n```\n",
    "tags": [
        "list",
        "Easy"
    ],
    "keywords": [
        "list"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}