{
    "id": "problem_18",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Generator,Global state,heapq. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating pylint adherence with generator, global state, and heapq usage.\n\nThis module provides a generator function and uses heapq to manage a global list.\n\"\"\"\n\nimport heapq\n\n# Global state for the heap\nheap_list = []\n\ndef add_to_heap(item):\n    \"\"\"Add an item to the global heap list.\"\"\"\n    heapq.heappush(heap_list, item)\n\ndef get_smallest():\n    \"\"\"Pop and return the smallest item from the global heap list.\"\"\"\n    return heapq.heappop(heap_list) if heap_list else None\n\ndef heap_items_generator():\n    \"\"\"Yield items from the global heap list in ascending order.\"\"\"\n    while heap_list:\n        yield get_smallest()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Add numbers to the heap\n    add_to_heap(10)\n    add_to_heap(5)\n    add_to_heap(1)\n    add_to_heap(7)\n\n    # Create a generator\n    heap_gen = heap_items_generator()\n\n    # Iterate through the generator and print items\n    for item in heap_gen:\n        print(item)\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}