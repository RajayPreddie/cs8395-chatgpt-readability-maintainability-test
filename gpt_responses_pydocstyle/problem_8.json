{
    "id": "problem_8",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: ContextManager. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating pydocstyle adherence with ContextManager.\n\nThis module provides an example of how to write a Python program that uses a\nContextManager to work with a list, ensuring all docstrings conform to the\npydocstyle standards.\n\"\"\"\n\nfrom contextlib import contextmanager\n\n@contextmanager\ndef list_manager(the_list):\n    \"\"\"Provide a context manager for a list.\n\n    This context manager yields a list and allows for operations to be\n    performed on that list within a 'with' block. After exiting the block,\n    it prints the modified list.\n\n    :param the_list: A list to be managed within the context.\n    :yield: The list provided as a parameter.\n    \"\"\"\n    try:\n        yield the_list\n    finally:\n        print(\"The modified list:\", the_list)\n\n# Example usage of the context manager\nif __name__ == \"__main__\":\n    my_list = [1, 2, 3]\n    with list_manager(my_list) as l:\n        l.append(4)\n        l.remove(1)\n```\n\n# Note: The above code demonstrates the use of a context manager with a list.\n# The context manager is used to append and remove items from the list, and\n# after the 'with' block, the modified list is printed.",
    "tags": [
        "ContextManager",
        "Easy"
    ],
    "keywords": [
        "ContextManager"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}