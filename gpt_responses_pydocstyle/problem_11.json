{
    "id": "problem_11",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Decorator,DefaultDict. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating pydocstyle adherence with decorators and defaultdict.\n\nThis module provides an example of how to use decorators and collections.defaultdict\nin a way that adheres to the pydocstyle standards for docstrings.\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import wraps\n\ndef count_calls(func):\n    \"\"\"Decorator that counts the number of times a function is called.\n\n    :param func: The function to be wrapped by the decorator.\n    :return: The wrapped function with added functionality to count calls.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        wrapper.calls += 1\n        return func(*args, **kwargs)\n    \n    wrapper.calls = 0\n    return wrapper\n\n@count_calls\ndef process_data(data):\n    \"\"\"Process a list of items and return a defaultdict with item counts.\n\n    :param data: A list of hashable items to be counted.\n    :return: A defaultdict with items as keys and their counts as values.\n    \"\"\"\n    counts = defaultdict(int)\n    for item in data:\n        counts[item] += 1\n    return counts\n\n# Example usage (uncomment to run):\n# if __name__ == \"__main__\":\n#     data = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n#     item_counts = process_data(data)\n#     print(item_counts)\n#     print(f\"The 'process_data' function has been called {process_data.calls} times.\")\n```\n\nPlease note that the example usage is commented out. If you want to run the program and see the output, you can uncomment those lines and execute the script in your command line interface.",
    "tags": [
        "Decorator",
        "DefaultDict",
        "Medium"
    ],
    "keywords": [
        "Decorator",
        "DefaultDict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}