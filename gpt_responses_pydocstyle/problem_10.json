{
    "id": "problem_10",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Counter. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"A module for demonstrating the use of Counter from collections.\n\nThis module provides an example of how to use the Counter class from the collections module\nto count the occurrences of elements in a list.\n\"\"\"\n\nfrom collections import Counter\n\ndef count_elements(elements):\n    \"\"\"Count the occurrences of each element in a list using Counter.\n\n    This function takes a list of hashable elements and returns a dictionary-like object\n    where keys are elements from the list and values are the counts of those elements.\n\n    :param elements: A list of hashable elements to count.\n    :return: A Counter object representing the count of each element in the list.\n    \"\"\"\n    return Counter(elements)\n\n# Example usage:\n# if __name__ == \"__main__\":\n#     example_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n#     counts = count_elements(example_list)\n#     print(counts)  # Output: Counter({'apple': 3, 'banana': 2, 'orange': 1})\n",
    "tags": [
        "Counter",
        "Easy"
    ],
    "keywords": [
        "Counter"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}