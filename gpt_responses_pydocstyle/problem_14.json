{
    "id": "problem_14",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Deque,dict. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating deque and dict usage with pydocstyle adherence.\n\nThis module provides a simple example of how to use a deque and a dict in Python,\nwhile writing docstrings that conform to the pydocstyle standards.\n\"\"\"\n\nfrom collections import deque\n\ndef manage_queue(operations):\n    \"\"\"Perform a series of operations on a deque and return a dictionary result.\n\n    This function takes a list of operations and performs them on a deque. Each\n    operation is a tuple with the first element being the operation name as a\n    string ('append', 'appendleft', 'pop', 'popleft') and the second element\n    being the value for the operation, if required.\n\n    :param operations: A list of tuples representing operations.\n    :return: A dictionary with the final deque and the last popped value.\n\n    Example usage:\n    >>> manage_queue([('append', 1), ('append', 2), ('popleft',)])\n    {'deque': deque([2]), 'last_popped': 1}\n    \"\"\"\n    d = deque()\n    last_popped = None\n\n    for operation in operations:\n        if operation[0] == 'append':\n            d.append(operation[1])\n        elif operation[0] == 'appendleft':\n            d.appendleft(operation[1])\n        elif operation[0] == 'pop':\n            last_popped = d.pop()\n        elif operation[0] == 'popleft':\n            last_popped = d.popleft()\n\n    return {'deque': d, 'last_popped': last_popped}\n\n# Example usage (uncomment the following lines to test the function):\n# ops = [('append', 1), ('append', 2), ('popleft',), ('append', 3)]\n# result = manage_queue(ops)\n# print(result)  # Should output: {'deque': deque([2, 3]), 'last_popped': 1}\n",
    "tags": [
        "Deque",
        "dict",
        "Medium"
    ],
    "keywords": [
        "Deque",
        "dict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}