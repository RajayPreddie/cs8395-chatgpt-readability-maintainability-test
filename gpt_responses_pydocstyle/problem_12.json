{
    "id": "problem_12",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: DefaultDict,DependencyInjection. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"A Python program demonstrating the use of DefaultDict for Dependency Injection.\n\nThis module showcases the use of collections.DefaultDict as a simple form of\nDependency Injection (DI) to manage dependencies within the program. It includes\na function to count the occurrences of elements in a list using DefaultDict.\n\"\"\"\n\nfrom collections import defaultdict\n\ndef count_elements(sequence):\n    \"\"\"Count the occurrences of elements in the sequence using DefaultDict.\n\n    This function takes a sequence (like a list) and counts the occurrences of\n    each element using a DefaultDict. The DefaultDict is used here as a form of\n    simple Dependency Injection to provide a default behavior for missing keys.\n\n    :param sequence: A list of elements to count occurrences of.\n    :return: A DefaultDict with elements as keys and their counts as values.\n    \"\"\"\n    # Using lambda: 0 so that the default value for any new key is 0\n    element_counter = defaultdict(lambda: 0)\n    \n    for element in sequence:\n        element_counter[element] += 1\n    \n    return element_counter\n\n# Example usage (uncomment to test in a CLI):\n# if __name__ == \"__main__\":\n#     elements = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n#     counts = count_elements(elements)\n#     for element, count in counts.items():\n#         print(f\"{element}: {count}\")\n",
    "tags": [
        "DefaultDict",
        "DependencyInjection",
        "Medium"
    ],
    "keywords": [
        "DefaultDict",
        "DependencyInjection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}