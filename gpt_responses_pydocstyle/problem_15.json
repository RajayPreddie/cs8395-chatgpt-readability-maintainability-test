{
    "id": "problem_15",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: dict,frozenset. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating pydocstyle adherence with dict and frozenset.\n\nThis module provides a function that takes a list of items and returns a dictionary with the items as keys and their occurrences as values. It uses frozenset to ensure the uniqueness of the items.\n\"\"\"\n\ndef count_items(item_list):\n    \"\"\"Count the occurrences of items in a list and return a dictionary.\n\n    This function takes a list of hashable items and returns a dictionary with items as keys\n    and the number of times they appear in the list as values. It utilizes a frozenset to\n    ensure the uniqueness of items when counting.\n\n    :param item_list: A list of hashable items to count.\n    :return: A dictionary with items as keys and their counts as values.\n    \"\"\"\n    # Ensure the uniqueness of items using frozenset\n    unique_items = frozenset(item_list)\n    # Initialize a dictionary to store the count of each item\n    item_count = {item: 0 for item in unique_items}\n    # Count the occurrences of each item in the list\n    for item in item_list:\n        item_count[item] += 1\n    return item_count\n\n# Example usage:\n# If running this module directly (not imported), demonstrate the function's capability.\nif __name__ == \"__main__\":\n    example_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n    print(count_items(example_list))\n    # Output should be: {'apple': 3, 'banana': 2, 'orange': 1}\n",
    "tags": [
        "dict",
        "frozenset",
        "Medium"
    ],
    "keywords": [
        "dict",
        "frozenset"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}