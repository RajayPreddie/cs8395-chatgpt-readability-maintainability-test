{
    "id": "problem_9",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Coroutine. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Module for demonstrating pydocstyle adherence with coroutine usage.\n\nThis module provides an example of how to write a coroutine function in Python,\nadhering to the pydocstyle standards for docstrings. It includes a simple\ncoroutine that accumulates values in a list.\n\"\"\"\n\ndef coroutine_accumulator():\n    \"\"\"Coroutine that accumulates values in a list.\n\n    This coroutine initializes an empty list and continuously appends values\n    sent to it until it receives a None, at which point it returns the list.\n\n    :return: The accumulated list of values.\n    \"\"\"\n    accumulator = []\n    try:\n        while True:\n            value = yield\n            if value is None:\n                break\n            accumulator.append(value)\n    except GeneratorExit:\n        pass\n    return accumulator\n\n\n# Example usage:\n# Initialize the coroutine\n# acc = coroutine_accumulator()\n# Prime the coroutine by advancing to the first yield\n# next(acc)\n# Send values to the coroutine\n# acc.send(1)\n# acc.send(2)\n# acc.send(3)\n# Retrieve the accumulated list by sending None\n# try:\n#     acc.send(None)\n# except StopIteration as e:\n#     accumulated_list = e.value\n# print(accumulated_list)  # Output: [1, 2, 3]\n",
    "tags": [
        "Coroutine",
        "Easy"
    ],
    "keywords": [
        "Coroutine"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}