{
    "id": "problem_2",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: asyncio. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "\"\"\"Example module for demonstrating adherence to pydocstyle.\n\nThis module provides a simple asynchronous function that processes a list\nof numbers and returns their sum. The purpose is to show how to write\ndocstrings in compliance with the pydocstyle standard.\n\"\"\"\n\nimport asyncio\n\nasync def sum_list(numbers):\n    \"\"\"Calculate the sum of a list of numbers asynchronously.\n\n    This function takes a list of numbers and asynchronously computes the sum,\n    simulating a delay to demonstrate asyncio functionality.\n\n    :param numbers: A list of numbers to be summed.\n    :return: The sum of the numbers in the list.\n    \"\"\"\n    await asyncio.sleep(1)  # Simulating an async I/O operation\n    return sum(numbers)\n\nasync def main():\n    \"\"\"Run the main event loop for the async sum_list function.\"\"\"\n    numbers_to_add = [1, 2, 3, 4, 5]\n    result = await sum_list(numbers_to_add)\n    print(f\"The sum of the numbers is: {result}\")\n\n# This check ensures that the asyncio event loop is run only if the script is executed directly.\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}