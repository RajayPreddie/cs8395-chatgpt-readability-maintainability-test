{
    "id": "problem_19",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a more complex example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Global state,heapq,IdiomaticPython. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import heapq\n\n# Using a global state to maintain a min heap\nmin_heap = []\n\ndef add_to_heap(element):\n    \"\"\"Add a new element to the global min heap.\"\"\"\n    heapq.heappush(min_heap, element)\n\ndef pop_from_heap():\n    \"\"\"Pop the smallest element from the global min heap.\"\"\"\n    if min_heap:\n        return heapq.heappop(min_heap)\n    return None\n\ndef get_heap_elements():\n    \"\"\"Return a sorted list of elements from the global min heap.\"\"\"\n    return sorted(min_heap)\n\ndef main():\n    # Add elements to the heap\n    add_to_heap(10)\n    add_to_heap(1)\n    add_to_heap(5)\n\n    # Pop elements from the heap and print them\n    print(pop_from_heap())  # Should print the smallest element\n    print(pop_from_heap())\n\n    # Get and print all elements from the heap\n    print(get_heap_elements())\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "radon"
}