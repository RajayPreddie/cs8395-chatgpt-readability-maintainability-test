{
    "id": "problem_17",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a more complex example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: GarbageCollection,Generator,Global state. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "# Python program to demonstrate garbage collection, generator usage,\n# and avoiding global state by using a list.\n\nimport gc\n\ndef garbage_collector_info():\n    \"\"\"Prints information about the garbage collector.\"\"\"\n    # Enable automatic garbage collection.\n    gc.enable()\n    # Print garbage collector info (thresholds and collected objects).\n    print(f\"Garbage Collector thresholds: {gc.get_threshold()}\")\n    gc.collect()  # Run a full collection\n    print(f\"Garbage collected objects: {gc.get_count()}\")\n\ndef fibonacci_generator(n):\n    \"\"\"A generator that yields the Fibonacci sequence up to the nth number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\ndef main():\n    # Display garbage collection info\n    garbage_collector_info()\n\n    # Generate Fibonacci sequence using a generator to avoid global state\n    fib_sequence = list(fibonacci_generator(10))\n\n    # Print the Fibonacci sequence stored in a list\n    print(\"Fibonacci Sequence:\")\n    for num in fib_sequence:\n        print(num)\n\n# Run the main function if the script is executed\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "radon"
}