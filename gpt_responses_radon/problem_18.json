{
    "id": "problem_18",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a more complex example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Generator,Global state,heapq. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import heapq\n\n# Global state to maintain the heap\nmin_heap = []\n\ndef add_to_heap(item):\n    \"\"\"Add an item to the heap.\"\"\"\n    heapq.heappush(min_heap, item)\n\ndef get_smallest():\n    \"\"\"Get the smallest item from the heap.\"\"\"\n    return heapq.heappop(min_heap) if min_heap else None\n\ndef heap_generator():\n    \"\"\"Generator that yields elements from the heap in sorted order.\"\"\"\n    while min_heap:\n        yield get_smallest()\n\ndef main():\n    # Add some items to the heap\n    add_to_heap(5)\n    add_to_heap(1)\n    add_to_heap(3)\n    add_to_heap(2)\n    add_to_heap(4)\n\n    # Use the generator to get the items in sorted order\n    for value in heap_generator():\n        print(value)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "radon"
}