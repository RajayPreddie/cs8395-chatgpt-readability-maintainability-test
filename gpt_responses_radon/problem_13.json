{
    "id": "problem_13",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a more complex example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: DependencyInjection,Deque. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "from collections import deque\n\nclass FibonacciGenerator:\n    def __init__(self):\n        self.cache = deque([0, 1], maxlen=2)  # Use deque for efficient popleft operation\n\n    def get_nth_fibonacci(self, n):\n        \"\"\"Return the nth Fibonacci number.\"\"\"\n        if n < len(self.cache):\n            return self.cache[n]\n        while len(self.cache) < n + 1:\n            next_fib = sum(self.cache)\n            self.cache.append(next_fib)\n            self.cache.popleft()  # Maintain only the last two Fibonacci numbers\n        return self.cache[-1]\n\ndef main():\n    fib_generator = FibonacciGenerator()\n    for i in range(10):\n        print(fib_generator.get_nth_fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "DependencyInjection",
        "Deque",
        "Medium"
    ],
    "keywords": [
        "DependencyInjection",
        "Deque"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "radon"
}