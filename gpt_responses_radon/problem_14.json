{
    "id": "problem_14",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a more complex example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Deque,dict. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "from collections import deque\n\ndef generate_number_sequence(n):\n    \"\"\"\n    Generate a sequence of numbers using a deque to maintain a sliding window of the last two numbers.\n    \"\"\"\n    sequence = deque([0, 1], maxlen=2)  # Use deque to hold the last two numbers\n    for _ in range(n):\n        yield sequence[0]\n        sequence.append(sequence[0] + sequence[1])  # Append the sum to the right, automatically discarding the leftmost item\n\ndef main():\n    n = 10  # Change this value to generate a different number of sequence elements\n    for number in generate_number_sequence(n):\n        print(number)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Deque",
        "dict",
        "Medium"
    ],
    "keywords": [
        "Deque",
        "dict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "radon"
}