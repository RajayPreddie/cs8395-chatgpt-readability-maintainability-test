{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytearray,bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of bytearray and bytes in Python.\n\nThis module provides functions to manipulate byte data using bytearray and bytes.\n\"\"\"\n\n\ndef append_bytes(byte_data, value):\n    \"\"\"Append a byte value to a bytearray and return the new bytearray.\"\"\"\n    if not isinstance(byte_data, bytearray):\n        raise TypeError(\"byte_data must be a bytearray\")\n    if not isinstance(value, int) or not 0 <= value <= 255:\n        raise ValueError(\"value must be an integer between 0 and 255\")\n    \n    byte_data.append(value)\n    return byte_data\n\n\ndef bytes_to_bytearray(byte_sequence):\n    \"\"\"Convert bytes to bytearray.\"\"\"\n    if not isinstance(byte_sequence, bytes):\n        raise TypeError(\"byte_sequence must be bytes\")\n    \n    return bytearray(byte_sequence)\n\n\ndef main():\n    \"\"\"Main function to demonstrate bytearray manipulation.\"\"\"\n    initial_bytes = bytes([50, 100, 150])\n    print(\"Initial bytes:\", initial_bytes)\n\n    byte_array = bytes_to_bytearray(initial_bytes)\n    print(\"Bytearray:\", byte_array)\n\n    updated_byte_array = append_bytes(byte_array, 200)\n    print(\"Updated bytearray:\", updated_byte_array)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytearray",
        "bytes",
        "Medium"
    ],
    "keywords": [
        "bytearray",
        "bytes"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pylint"
}