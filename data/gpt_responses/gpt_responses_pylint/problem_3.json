{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytearray.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of bytearray in Python.\n\nThis module provides a function that manipulates a bytearray object.\n\"\"\"\n\ndef modify_bytearray(data, value, index):\n    \"\"\"\n    Modify a bytearray by setting a byte at a specified index to a new value.\n\n    Args:\n        data (bytearray): The bytearray to be modified.\n        value (int): The new value to set at the specified index.\n        index (int): The index at which to set the new value.\n\n    Returns:\n        bytearray: The modified bytearray.\n    \"\"\"\n    if not isinstance(data, bytearray):\n        raise TypeError(\"Data must be a bytearray.\")\n    if not (0 <= value <= 255):\n        raise ValueError(\"Value must be in range 0-255.\")\n    if not (0 <= index < len(data)):\n        raise IndexError(\"Index out of range.\")\n\n    data[index] = value\n    return data\n\ndef main():\n    \"\"\"\n    Main function to demonstrate the modification of a bytearray.\n    \"\"\"\n    original_data = bytearray(b'\\x00\\x01\\x02\\x03')\n    print(\"Original bytearray:\", original_data)\n\n    try:\n        new_value = 255  # Maximum byte value\n        index_to_modify = 2\n        modified_data = modify_bytearray(original_data, new_value, index_to_modify)\n        print(\"Modified bytearray:\", modified_data)\n    except (TypeError, ValueError, IndexError) as error:\n        print(\"Error:\", error)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytearray",
        "Easy"
    ],
    "keywords": [
        "bytearray"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}