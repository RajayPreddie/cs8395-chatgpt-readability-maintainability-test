{
    "id": "problem_17",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: GarbageCollection,Generator,Global state.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nThis module demonstrates the use of garbage collection, generator functions,\nand global state management in Python, adhering to pylint standards.\n\"\"\"\n\nimport gc\n\n# Global state\nglobal_counter = 0\n\ndef increment_global_counter():\n    \"\"\"Increment the global counter.\"\"\"\n    global global_counter\n    global_counter += 1\n\ndef collect_garbage():\n    \"\"\"Force a garbage collection.\"\"\"\n    gc.collect()\n    print(\"Garbage collection has been executed.\")\n\ndef fibonacci_generator(limit):\n    \"\"\"A generator function to create a Fibonacci sequence up to a given limit.\"\"\"\n    a, b = 0, 1\n    while a < limit:\n        yield a\n        a, b = b, a + b\n\ndef main():\n    \"\"\"Main function to demonstrate the use of global state and generators.\"\"\"\n    # Demonstrate the use of global state\n    print(f\"Initial global counter value: {global_counter}\")\n    increment_global_counter()\n    print(f\"Global counter after increment: {global_counter}\")\n\n    # Demonstrate the use of a generator\n    fib_limit = 10\n    print(f\"Fibonacci sequence up to {fib_limit}:\")\n    for fib_number in fibonacci_generator(fib_limit):\n        print(fib_number, end=' ')\n    print()\n\n    # Demonstrate garbage collection\n    collect_garbage()\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}