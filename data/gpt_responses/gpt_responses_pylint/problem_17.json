{
    "id": "problem_17",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: GarbageCollection,Generator,Global state.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nModule to demonstrate garbage collection, generator usage, and avoiding global state in Python.\n\nThis module provides a generator function to create a sequence of numbers and a function to\ndemonstrate garbage collection.\n\"\"\"\n\nimport gc\n\ndef number_generator(limit):\n    \"\"\"Generate a sequence of numbers up to a specified limit.\"\"\"\n    num = 0\n    while num < limit:\n        yield num\n        num += 1\n\ndef handle_garbage_collection():\n    \"\"\"Handle garbage collection to free memory.\"\"\"\n    gc.collect()\n    print(\"Garbage collection has been executed.\")\n\ndef main():\n    \"\"\"Main function to demonstrate generator usage and garbage collection.\"\"\"\n    # Generate numbers using the generator\n    for number in number_generator(10):\n        print(number)\n\n    # Explicitly handle garbage collection\n    handle_garbage_collection()\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}