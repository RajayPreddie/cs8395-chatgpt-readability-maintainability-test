{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating pylint adherence with ChainMap, Comprehension, and Concurrency.\n\nThis module provides an example function that merges dictionaries using ChainMap,\ncreates a list using comprehension, and demonstrates a simple concurrency with threading.\n\"\"\"\n\nfrom collections import ChainMap\nimport threading\n\ndef merge_dictionaries(dict1, dict2):\n    \"\"\"Merge two dictionaries using ChainMap and return the result.\"\"\"\n    chain = ChainMap(dict1, dict2)\n    return dict(chain)\n\ndef even_numbers_squared(max_num):\n    \"\"\"Return a list of squares of even numbers up to max_num using list comprehension.\"\"\"\n    return [x * x for x in range(max_num) if x % 2 == 0]\n\ndef print_sum_async(a, b):\n    \"\"\"Print the sum of two numbers using a separate thread.\"\"\"\n    def task():\n        print(f\"The sum is: {a + b}\")\n    thread = threading.Thread(target=task)\n    thread.start()\n    thread.join()\n\nif __name__ == \"__main__\":\n    DICT1 = {'a': 1, 'b': 2}\n    DICT2 = {'b': 3, 'c': 4}\n\n    # Merge dictionaries\n    merged_dict = merge_dictionaries(DICT1, DICT2)\n    print(f\"Merged Dictionary: {merged_dict}\")\n\n    # List of squared even numbers\n    squared_evens = even_numbers_squared(10)\n    print(f\"Squared Even Numbers: {squared_evens}\")\n\n    # Asynchronous sum printing\n    print_sum_async(5, 10)\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}