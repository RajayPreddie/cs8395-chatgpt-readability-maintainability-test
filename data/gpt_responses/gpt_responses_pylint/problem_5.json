{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport concurrent.futures\nfrom collections import ChainMap\n\ndef merge_dictionaries(dicts):\n    \"\"\"Merge multiple dictionaries using ChainMap.\"\"\"\n    chain = ChainMap(*dicts)\n    return dict(chain)\n\ndef generate_squares(n):\n    \"\"\"Generate a dictionary of squares using dictionary comprehension.\"\"\"\n    return {num: num**2 for num in range(1, n + 1)}\n\ndef calculate_squares_concurrently(numbers):\n    \"\"\"Calculate squares of a list of numbers concurrently.\"\"\"\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_num = {executor.submit(generate_squares, num): num for num in numbers}\n        results = []\n        for future in concurrent.futures.as_completed(future_to_num):\n            results.append(future.result())\n        return merge_dictionaries(results)\n\nif __name__ == \"__main__\":\n    numbers_to_calculate = [5, 10, 15]\n    squares = calculate_squares_concurrently(numbers_to_calculate)\n    print(squares)\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}