{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating usage of the 'bytes' keyword in Python.\n\nThis module provides an example function that converts strings to bytes and counts the number of bytes.\n\"\"\"\n\ndef count_bytes(input_string):\n    \"\"\"Convert a string to bytes and return the number of bytes.\n    \n    Args:\n        input_string (str): The string to be converted to bytes.\n\n    Returns:\n        int: The number of bytes in the converted string.\n    \"\"\"\n    byte_data = bytes(input_string, 'utf-8')\n    return len(byte_data)\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter a string to count its bytes: \")\n    byte_count = count_bytes(user_input)\n    print(f\"The number of bytes in the input string is: {byte_count}\")\n",
    "tags": [
        "bytes",
        "Easy"
    ],
    "keywords": [
        "bytes"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}