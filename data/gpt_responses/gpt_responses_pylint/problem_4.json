{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes,ChainMap,Comprehension.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of bytes, ChainMap, and Comprehension in Python.\n\nThis module provides functions to perform operations using bytes, ChainMap, and list comprehensions.\n\"\"\"\n\nfrom collections import ChainMap\n\ndef bytes_to_hex_string(byte_data):\n    \"\"\"Convert bytes to a hex string.\"\"\"\n    return byte_data.hex()\n\ndef merge_dictionaries(*dict_args):\n    \"\"\"Merge multiple dictionaries using ChainMap.\"\"\"\n    chain = ChainMap(*dict_args)\n    return dict(chain)\n\ndef squared_numbers_comprehension(numbers):\n    \"\"\"Return a list of squared numbers using list comprehension.\"\"\"\n    return [number ** 2 for number in numbers]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Convert bytes to hex string\n    byte_data = b'\\x00\\x0F'\n    print(\"Hex String:\", bytes_to_hex_string(byte_data))\n\n    # Merge dictionaries using ChainMap\n    dict1 = {'a': 1, 'b': 2}\n    dict2 = {'b': 3, 'c': 4}\n    merged_dict = merge_dictionaries(dict1, dict2)\n    print(\"Merged Dictionary:\", merged_dict)\n\n    # Squared numbers using comprehension\n    numbers = [1, 2, 3, 4, 5]\n    print(\"Squared Numbers:\", squared_numbers_comprehension(numbers))\n",
    "tags": [
        "bytes",
        "ChainMap",
        "Comprehension",
        "Hard"
    ],
    "keywords": [
        "bytes",
        "ChainMap",
        "Comprehension"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}