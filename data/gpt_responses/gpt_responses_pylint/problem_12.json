{
    "id": "problem_12",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DefaultDict,DependencyInjection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom typing import Callable, Dict, Any\n\nclass Injector:\n    \"\"\"A simple dependency injection class.\"\"\"\n    \n    def __init__(self):\n        self._providers = defaultdict(lambda: None)\n    \n    def register(self, name: str, provider: Callable):\n        \"\"\"Register a dependency provider.\"\"\"\n        self._providers[name] = provider\n    \n    def get(self, name: str) -> Any:\n        \"\"\"Get the service instance by name.\"\"\"\n        provider = self._providers.get(name)\n        if not provider:\n            raise ValueError(f\"Provider for {name} not registered\")\n        return provider()\n\ndef service_a():\n    \"\"\"Example service A.\"\"\"\n    return \"Service A\"\n\ndef service_b():\n    \"\"\"Example service B.\"\"\"\n    return \"Service B\"\n\ndef main():\n    \"\"\"Main function demonstrating Dependency Injection with DefaultDict.\"\"\"\n    injector = Injector()\n    injector.register('service_a', service_a)\n    injector.register('service_b', service_b)\n    \n    service_a_instance = injector.get('service_a')\n    service_b_instance = injector.get('service_b')\n    \n    print(service_a_instance)\n    print(service_b_instance)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "DefaultDict",
        "DependencyInjection",
        "Medium"
    ],
    "keywords": [
        "DefaultDict",
        "DependencyInjection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pylint"
}