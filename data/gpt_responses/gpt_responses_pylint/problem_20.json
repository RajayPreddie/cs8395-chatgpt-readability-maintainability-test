{
    "id": "problem_20",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: heapq,IdiomaticPython,Introspection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating heapq, idiomatic Python, and introspection.\n\nThis module provides an example function to merge sorted lists using a heap and introspection.\n\"\"\"\n\nimport heapq\nfrom typing import List\n\ndef merge_sorted_lists(*lists: List[int]) -> List[int]:\n    \"\"\"Merge multiple sorted lists into a single sorted list using a heap.\n\n    Args:\n        lists: A variable number of lists containing sorted integers.\n\n    Returns:\n        A single list containing all the integers from the input lists in sorted order.\n    \"\"\"\n    # Using introspection to check if all arguments are lists\n    for input_list in lists:\n        if not isinstance(input_list, list):\n            raise ValueError(\"All arguments must be of type 'list'.\")\n\n    # Using idiomatic Python to merge and heapify\n    merged_heap = heapq.merge(*lists)\n    return list(merged_heap)\n\n# Example usage\nif __name__ == \"__main__\":\n    sorted_list1 = [1, 3, 5]\n    sorted_list2 = [2, 4, 6]\n    sorted_list3 = [7, 8, 9]\n\n    # Merge sorted lists\n    result = merge_sorted_lists(sorted_list1, sorted_list2, sorted_list3)\n    print(result)  # Output should be [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
    "tags": [
        "heapq",
        "IdiomaticPython",
        "Introspection",
        "Hard"
    ],
    "keywords": [
        "heapq",
        "IdiomaticPython",
        "Introspection"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}