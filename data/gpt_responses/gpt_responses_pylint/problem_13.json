{
    "id": "problem_13",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DependencyInjection,Deque.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nModule for demonstrating the use of Dependency Injection and Deque in Python.\n\nThis module provides a class that uses Dependency Injection to work with a Deque.\n\"\"\"\n\nfrom collections import deque\nfrom typing import Any, Deque as TypeDeque\n\nclass DequeManager:\n    \"\"\"Class to manage a deque with dependency injection.\"\"\"\n\n    def __init__(self, deque_instance: TypeDeque):\n        \"\"\"Initialize the DequeManager with an instance of a deque.\"\"\"\n        self.deque = deque_instance\n\n    def append_to_deque(self, item: Any):\n        \"\"\"Append an item to the deque.\"\"\"\n        self.deque.append(item)\n\n    def appendleft_to_deque(self, item: Any):\n        \"\"\"Append an item to the left side of the deque.\"\"\"\n        self.deque.appendleft(item)\n\n    def pop_from_deque(self):\n        \"\"\"Pop an item from the deque.\"\"\"\n        return self.deque.pop()\n\n    def popleft_from_deque(self):\n        \"\"\"Pop an item from the left side of the deque.\"\"\"\n        return self.deque.popleft()\n\n    def get_deque(self):\n        \"\"\"Return the deque.\"\"\"\n        return self.deque\n\ndef main():\n    \"\"\"Main function to demonstrate the use of DequeManager.\"\"\"\n    # Dependency injection: we create a deque and inject it into DequeManager\n    my_deque = deque()\n    deque_manager = DequeManager(my_deque)\n\n    # Use DequeManager to manipulate the deque\n    deque_manager.append_to_deque('a')\n    deque_manager.append_to_deque('b')\n    deque_manager.appendleft_to_deque('c')\n\n    # Access and display the deque\n    current_deque = deque_manager.get_deque()\n    print(f\"Current deque: {current_deque}\")\n\n    # Pop items from the deque\n    deque_manager.pop_from_deque()\n    deque_manager.popleft_from_deque()\n\n    # Display the deque after popping items\n    final_deque = deque_manager.get_deque()\n    print(f\"Final deque: {final_deque}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "DependencyInjection",
        "Deque",
        "Medium"
    ],
    "keywords": [
        "DependencyInjection",
        "Deque"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pylint"
}