{
    "id": "problem_11",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Decorator,DefaultDict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nModule for demonstrating the use of decorators and defaultdict from collections.\n\nThis module provides an example function and a decorator that counts how many times\nfunctions were called, using defaultdict for storing counts.\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import wraps\n\n# Decorator to count function calls\ndef count_calls(func):\n    \"\"\"Decorator that counts the number of times a function is called.\"\"\"\n\n    @wraps(func)\n    def wrapper_count_calls(*args, **kwargs):\n        wrapper_count_calls.calls[func.__name__] += 1\n        return func(*args, **kwargs)\n\n    wrapper_count_calls.calls = defaultdict(int)\n    return wrapper_count_calls\n\n# Example function to decorate\n@count_calls\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n in (0, 1):\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Main function to demonstrate functionality\ndef main():\n    \"\"\"Main function demonstrating the use of the count_calls decorator.\"\"\"\n    fibonacci(3)\n    fibonacci(4)\n\n    for func, count in count_calls.calls.items():\n        print(f\"Function '{func}' was called {count} time(s).\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Decorator",
        "DefaultDict",
        "Medium"
    ],
    "keywords": [
        "Decorator",
        "DefaultDict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pylint"
}