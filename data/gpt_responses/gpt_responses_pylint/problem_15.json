{
    "id": "problem_15",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: dict,frozenset.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of dict and frozenset in Python.\n\nThis module provides a function that creates a frozenset from a dictionary's keys.\n\"\"\"\n\ndef create_frozenset_from_dict_keys(input_dict):\n    \"\"\"Create and return a frozenset containing the keys of the provided dictionary.\"\"\"\n    return frozenset(input_dict.keys())\n\ndef main():\n    \"\"\"Main function to demonstrate the use of create_frozenset_from_dict_keys.\"\"\"\n    sample_dict = {'apple': 1, 'banana': 2, 'cherry': 3}\n    keys_frozenset = create_frozenset_from_dict_keys(sample_dict)\n    print(\"Frozenset of dictionary keys:\", keys_frozenset)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "dict",
        "frozenset",
        "Medium"
    ],
    "keywords": [
        "dict",
        "frozenset"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pylint"
}