{
    "id": "problem_15",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: dict,frozenset.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of dict and frozenset in Python.\n\nThis module provides a function to count the unique elements in a list using a frozenset,\nand a function to create a frequency dictionary of elements in a list.\n\"\"\"\n\n\ndef count_unique_elements(items):\n    \"\"\"Count the number of unique elements in a list using a frozenset.\n\n    Args:\n        items (list): The list of items to count unique elements from.\n\n    Returns:\n        int: The number of unique elements.\n    \"\"\"\n    unique_items = frozenset(items)\n    return len(unique_items)\n\n\ndef create_frequency_dict(items):\n    \"\"\"Create a frequency dictionary for elements in a list.\n\n    Args:\n        items (list): The list of items to create a frequency dictionary from.\n\n    Returns:\n        dict: A dictionary with items as keys and their frequencies as values.\n    \"\"\"\n    frequency = {}\n    for item in items:\n        frequency[item] = frequency.get(item, 0) + 1\n    return frequency\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = ['apple', 'banana', 'apple', 'cherry', 'banana', 'cherry', 'cherry']\n    print(\"Count of unique elements:\", count_unique_elements(example_list))\n    print(\"Frequency dictionary:\", create_frequency_dict(example_list))\n",
    "tags": [
        "dict",
        "frozenset",
        "Medium"
    ],
    "keywords": [
        "dict",
        "frozenset"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pylint"
}