{
    "id": "problem_1",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: list.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating list manipulation adhering to pylint standards.\n\nThis module provides functions to perform operations on lists.\n\"\"\"\n\ndef append_to_list(element, target_list=None):\n    \"\"\"Append an element to a list, creating a new list if none is provided.\n\n    Args:\n        element: The element to be appended.\n        target_list (list, optional): The list to which the element will be appended. Defaults to None.\n\n    Returns:\n        list: The list with the appended element.\n    \"\"\"\n    if target_list is None:\n        target_list = []\n    target_list.append(element)\n    return target_list\n\ndef main():\n    \"\"\"Main function to demonstrate list manipulation.\"\"\"\n    my_list = [1, 2, 3]\n    print(\"Original list:\", my_list)\n\n    new_element = 4\n    updated_list = append_to_list(new_element, my_list)\n    print(\"Updated list:\", updated_list)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "list",
        "Easy"
    ],
    "keywords": [
        "list"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}