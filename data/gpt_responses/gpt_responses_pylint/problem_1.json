{
    "id": "problem_1",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: list.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating list manipulation adhering to pylint standards.\n\nThis module provides functions to perform various operations on lists.\n\"\"\"\n\ndef add_to_list(item, target_list=None):\n    \"\"\"Add an item to a list and return the list.\n    \n    Args:\n        item: Item to be added to the list.\n        target_list (optional): List to which the item will be added. If not specified, a new list is created.\n    \n    Returns:\n        list: The list with the item added.\n    \"\"\"\n    if target_list is None:\n        target_list = []\n    target_list.append(item)\n    return target_list\n\ndef find_item_index(item, target_list):\n    \"\"\"Find the index of an item in a list.\n\n    Args:\n        item: Item whose index needs to be found.\n        target_list: List in which to find the item.\n\n    Returns:\n        int: Index of the item if found, else -1.\n    \"\"\"\n    try:\n        return target_list.index(item)\n    except ValueError:\n        return -1\n\ndef remove_item(item, target_list):\n    \"\"\"Remove an item from the list and return the updated list.\n\n    Args:\n        item: Item to be removed from the list.\n        target_list: List from which the item will be removed.\n\n    Returns:\n        list: The updated list after the item has been removed.\n    \"\"\"\n    try:\n        target_list.remove(item)\n    except ValueError:\n        pass\n    return target_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    my_list = add_to_list(10)\n    my_list = add_to_list(20, my_list)\n    my_list = add_to_list(30, my_list)\n    print(\"List after additions:\", my_list)\n\n    index_of_20 = find_item_index(20, my_list)\n    print(\"Index of 20:\", index_of_20)\n\n    my_list = remove_item(20, my_list)\n    print(\"List after removal of 20:\", my_list)\n",
    "tags": [
        "list",
        "Easy"
    ],
    "keywords": [
        "list"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}