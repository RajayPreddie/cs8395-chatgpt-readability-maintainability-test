{
    "id": "problem_1",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: list.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating list manipulation adhering to pylint standards.\n\nThis module provides functions to perform operations on lists following pylint coding conventions.\n\"\"\"\n\ndef find_max_value(numbers):\n    \"\"\"Return the maximum value from a list of numbers.\"\"\"\n    if not numbers:\n        raise ValueError('The list is empty')\n    return max(numbers)\n\ndef main():\n    \"\"\"Main function to demonstrate find_max_value usage.\"\"\"\n    sample_list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    max_value = find_max_value(sample_list)\n    print(f\"The maximum value in the list is: {max_value}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "list",
        "Easy"
    ],
    "keywords": [
        "list"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}