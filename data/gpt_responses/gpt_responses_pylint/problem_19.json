{
    "id": "problem_19",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Global state,heapq,IdiomaticPython.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nModule for demonstrating adherence to pylint standards using heapq and global state.\n\nThis module provides an example class that manages a priority queue using the heapq module,\nwhile maintaining a global state count of items added to the queue.\n\"\"\"\n\nimport heapq\n\n# Global state to keep track of the number of items added to the queue\ntotal_items_added = 0\n\nclass PriorityQueueManager:\n    \"\"\"Class to manage a priority queue using the heapq module.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the priority queue manager with an empty list.\"\"\"\n        self._priority_queue = []\n\n    def add_item(self, item, priority):\n        \"\"\"Add an item with a given priority to the priority queue.\"\"\"\n        global total_items_added\n        heapq.heappush(self._priority_queue, (priority, item))\n        total_items_added += 1\n\n    def pop_item(self):\n        \"\"\"Remove and return the highest priority item from the priority queue.\"\"\"\n        if self._priority_queue:\n            return heapq.heappop(self._priority_queue)[1]\n        return None\n\n    def peek_item(self):\n        \"\"\"Return the highest priority item without removing it from the priority queue.\"\"\"\n        if self._priority_queue:\n            return self._priority_queue[0][1]\n        return None\n\n    def get_total_items(self):\n        \"\"\"Return the total number of items added to the queue.\"\"\"\n        return total_items_added\n\n# Example usage\nif __name__ == \"__main__\":\n    pq_manager = PriorityQueueManager()\n    pq_manager.add_item(\"task1\", 2)\n    pq_manager.add_item(\"task2\", 1)\n    pq_manager.add_item(\"task3\", 3)\n\n    print(f\"Total items added: {pq_manager.get_total_items()}\")\n    print(f\"Next item to process: {pq_manager.pop_item()}\")\n    print(f\"Total items added: {pq_manager.get_total_items()}\")\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}