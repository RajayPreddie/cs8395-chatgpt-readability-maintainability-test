{
    "id": "problem_19",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Global state,heapq,IdiomaticPython.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nModule for demonstrating adherence to pylint coding standards with a focus on\nglobal state management and idiomatic Python usage involving the heapq module.\n\"\"\"\n\nimport heapq\n\nclass MinHeap:\n    \"\"\"Class to represent a min-heap data structure.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize an empty heap.\"\"\"\n        self.heap = []\n\n    def push(self, item):\n        \"\"\"Push an item onto the heap.\"\"\"\n        heapq.heappush(self.heap, item)\n\n    def pop(self):\n        \"\"\"Pop the smallest item off the heap.\"\"\"\n        return heapq.heappop(self.heap)\n\n    def peek(self):\n        \"\"\"Peek at the smallest item in the heap without popping it.\"\"\"\n        return self.heap[0] if self.heap else None\n\n    def __len__(self):\n        \"\"\"Return the current size of the heap.\"\"\"\n        return len(self.heap)\n\ndef manage_global_state(heap_instance, values_to_add):\n    \"\"\"Manage a global state represented by a heap instance.\n\n    Args:\n        heap_instance (MinHeap): An instance of MinHeap to manage.\n        values_to_add (list): A list of values to add to the heap.\n\n    Returns:\n        list: Sorted values from the heap after adding new values.\n    \"\"\"\n    for value in values_to_add:\n        heap_instance.push(value)\n\n    sorted_values = []\n    while len(heap_instance) > 0:\n        sorted_values.append(heap_instance.pop())\n\n    return sorted_values\n\ndef main():\n    \"\"\"Main function to demonstrate heap operations.\"\"\"\n    heap = MinHeap()\n    values = [5, 1, 3, 4, 2]\n    sorted_values = manage_global_state(heap, values)\n    print(f\"Sorted values: {sorted_values}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}