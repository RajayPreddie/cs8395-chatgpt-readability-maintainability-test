{
    "id": "problem_2",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: asyncio.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nasync def fetch_data():\n    \"\"\"Simulate fetching data from a remote source with a delay.\"\"\"\n    print(\"Start fetching\")\n    await asyncio.sleep(2)\n    print(\"Done fetching\")\n    return {'data': 1}\n\nasync def process_data():\n    \"\"\"Process data after fetching.\"\"\"\n    print(\"Start processing\")\n    data = await fetch_data()\n    print(f\"Processed data: {data['data'] + 1}\")\n\nasync def main():\n    \"\"\"Main function to run asyncio tasks.\"\"\"\n    await asyncio.gather(fetch_data(), process_data())\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}