{
    "id": "problem_10",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Counter.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nModule for demonstrating the use of Counter from collections.\n\nThis module provides an example function that counts the frequency of elements in a list.\n\"\"\"\n\nfrom collections import Counter\n\ndef count_elements(input_list):\n    \"\"\"\n    Count the frequency of each element in the input list.\n\n    Args:\n        input_list (list): A list of elements to be counted.\n\n    Returns:\n        dict: A dictionary with elements as keys and their counts as values.\n    \"\"\"\n    return Counter(input_list)\n\nif __name__ == \"__main__\":\n    sample_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n    element_counts = count_elements(sample_list)\n    for element, count in element_counts.items():\n        print(f\"{element}: {count}\")\n",
    "tags": [
        "Counter",
        "Easy"
    ],
    "keywords": [
        "Counter"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}