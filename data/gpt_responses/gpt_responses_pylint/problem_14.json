{
    "id": "problem_14",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Deque,dict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of Deque and dict in Python.\n\nThis module provides a simple example of a palindrome checker using collections.deque\nand a function to count the frequency of elements using dict.\n\"\"\"\n\nfrom collections import deque\n\ndef is_palindrome(sequence):\n    \"\"\"Check if the given sequence is a palindrome.\n\n    Args:\n        sequence (str): The sequence to check.\n\n    Returns:\n        bool: True if sequence is a palindrome, False otherwise.\n    \"\"\"\n    sequence_deque = deque(sequence)\n    while len(sequence_deque) > 1:\n        if sequence_deque.popleft() != sequence_deque.pop():\n            return False\n    return True\n\ndef count_frequency(elements):\n    \"\"\"Count the frequency of each element in the given iterable.\n\n    Args:\n        elements (iterable): The iterable of elements to count.\n\n    Returns:\n        dict: A dictionary with elements as keys and frequencies as values.\n    \"\"\"\n    frequency_dict = {}\n    for element in elements:\n        frequency_dict[element] = frequency_dict.get(element, 0) + 1\n    return frequency_dict\n\n# Example usage (Uncomment to use)\n# if __name__ == \"__main__\":\n#     # Check for palindrome\n#     sequence = \"radar\"\n#     print(f\"Is '{sequence}' a palindrome? {is_palindrome(sequence)}\")\n#\n#     # Count frequency of elements\n#     elements = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n#     print(f\"Frequency of elements: {count_frequency(elements)}\")\n",
    "tags": [
        "Deque",
        "dict",
        "Medium"
    ],
    "keywords": [
        "Deque",
        "dict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pylint"
}