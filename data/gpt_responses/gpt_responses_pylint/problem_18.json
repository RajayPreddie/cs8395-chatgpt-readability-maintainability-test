{
    "id": "problem_18",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\ndef generate_numbers(limit):\n    \"\"\"Generate numbers up to a given limit.\"\"\"\n    for i in range(limit):\n        yield i\n\ndef maintain_global_min_heap(numbers):\n    \"\"\"Maintain a global minimum heap from a sequence of numbers.\"\"\"\n    global min_heap\n    min_heap = []\n    for number in numbers:\n        heapq.heappush(min_heap, number)\n\ndef get_smallest_numbers(count):\n    \"\"\"Return the smallest numbers from the global min heap.\"\"\"\n    smallest_numbers = []\n    try:\n        for _ in range(count):\n            smallest_numbers.append(heapq.heappop(min_heap))\n    except IndexError:\n        print(\"Not enough elements in the heap to get the requested count.\")\n    return smallest_numbers\n\n# Example usage\nNUMBERS_LIMIT = 10\nSMALLEST_COUNT = 3\n\n# Generate numbers using a generator\nnumber_generator = generate_numbers(NUMBERS_LIMIT)\n\n# Maintain a global state with a min heap\nmaintain_global_min_heap(number_generator)\n\n# Retrieve the smallest numbers from the global min heap\nsmallest_numbers = get_smallest_numbers(SMALLEST_COUNT)\nprint(smallest_numbers)\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}