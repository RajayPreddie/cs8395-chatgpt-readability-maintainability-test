{
    "id": "problem_18",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nModule for demonstrating the use of a generator, global state, and heapq in Python.\n\nThis module provides a function to generate an infinite sequence of integers\nand use heapq to maintain a running smallest numbers list.\n\"\"\"\n\nimport heapq\n\n# Global state for the smallest numbers heap\n_smallest_numbers = []\n\ndef integer_generator():\n    \"\"\"Yield an infinite sequence of integers starting from 1.\"\"\"\n    n = 1\n    while True:\n        yield n\n        n += 1\n\ndef add_number_to_heap(number):\n    \"\"\"Add a number to the smallest numbers heap and maintain its size.\"\"\"\n    # Assume we want to keep 5 smallest numbers in the global state\n    heap_size = 5\n    \n    # Add the new number to the heap\n    heapq.heappush(_smallest_numbers, number)\n    \n    # If the heap is larger than the desired size, remove the largest element\n    if len(_smallest_numbers) > heap_size:\n        heapq.heappop(_smallest_numbers)\n\ndef get_smallest_numbers():\n    \"\"\"Return the list of the smallest numbers.\"\"\"\n    return list(_smallest_numbers)\n\ndef main():\n    \"\"\"Main function to demonstrate the usage of the generator and heapq.\"\"\"\n    gen = integer_generator()\n    \n    # Generate and add 10 numbers to the heap\n    for _ in range(10):\n        number = next(gen)\n        add_number_to_heap(number)\n    \n    # Display the 5 smallest numbers\n    print(\"The 5 smallest numbers are:\", get_smallest_numbers())\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pylint"
}