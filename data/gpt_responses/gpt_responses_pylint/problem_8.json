{
    "id": "problem_8",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ContextManager.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of a Context Manager.\n\nThis module provides a custom context manager for managing resources.\n\"\"\"\n\nfrom contextlib import contextmanager\n\n@contextmanager\ndef managed_resource(*args, **kwargs):\n    \"\"\"Context manager that manages a resource.\"\"\"\n    resource = acquire_resource(*args, **kwargs)\n    try:\n        yield resource\n    finally:\n        release_resource(resource)\n\ndef acquire_resource(*args, **kwargs):\n    \"\"\"Simulate the acquisition of a resource.\"\"\"\n    print(\"Acquiring resource with args:\", args, \"and kwargs:\", kwargs)\n    return \"resource\"\n\ndef release_resource(resource):\n    \"\"\"Simulate the release of a resource.\"\"\"\n    print(f\"Releasing resource: {resource}\")\n\ndef main():\n    \"\"\"Main function demonstrating the use of the custom context manager.\"\"\"\n    with managed_resource(42, foo='bar') as resource:\n        print(f\"Using {resource} within the context.\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ContextManager",
        "Easy"
    ],
    "keywords": [
        "ContextManager"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}