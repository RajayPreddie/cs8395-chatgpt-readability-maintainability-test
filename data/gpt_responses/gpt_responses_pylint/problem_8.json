{
    "id": "problem_8",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pylint coding standard. Here's an example snippet compliant with pylint:\n\n\"\"\"Module for demonstrating pylint adherence.\n\nThis module provides an example function formatted to comply with pylint standards.\n\"\"\"\n\ndef calculate_sum(a, b):\n    \"\"\"Calculate and return the sum of two numbers.\"\"\"\n    return a + b\n\nFocus on clean, readable code following the style of the provided snippet. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ContextManager.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport os\nfrom contextlib import contextmanager\n\n@contextmanager\ndef change_directory(destination):\n    \"\"\"Change directory context manager.\n\n    Temporarily change the working directory to the specified path and\n    revert it back to the original path upon exiting the context.\n    \"\"\"\n    try:\n        original_directory = os.getcwd()\n        os.chdir(destination)\n        yield\n    finally:\n        os.chdir(original_directory)\n\ndef list_directory_contents(directory):\n    \"\"\"List the contents of a directory.\"\"\"\n    with change_directory(directory):\n        return os.listdir('.')\n\nif __name__ == \"__main__\":\n    directory_to_list = input(\"Enter the directory path to list contents: \")\n    try:\n        contents = list_directory_contents(directory_to_list)\n        print(f\"Contents of '{directory_to_list}':\")\n        for item in contents:\n            print(item)\n    except FileNotFoundError:\n        print(f\"The directory '{directory_to_list}' does not exist.\")\n    except PermissionError:\n        print(f\"Permission denied to access the directory '{directory_to_list}'.\")\n",
    "tags": [
        "ContextManager",
        "Easy"
    ],
    "keywords": [
        "ContextManager"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pylint"
}