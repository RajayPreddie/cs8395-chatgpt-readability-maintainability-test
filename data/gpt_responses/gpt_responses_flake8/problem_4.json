{
    "id": "problem_4",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes,ChainMap,Comprehension.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\n\n\ndef convert_to_bytes(data):\n    \"\"\"Convert a list of values to a list of bytes.\"\"\"\n    return [bytes(str(item), 'utf-8') for item in data]\n\n\ndef merge_dictionaries(*dicts):\n    \"\"\"Merge multiple dictionaries using ChainMap.\"\"\"\n    return ChainMap(*dicts)\n\n\ndef comprehension_example(some_dict):\n    \"\"\"Use a dictionary comprehension to invert keys and values.\"\"\"\n    return {value: key for key, value in some_dict.items()}\n\n\nif __name__ == \"__main__\":\n    # Example usage of convert_to_bytes\n    data_list = [123, 'abc', 45.67]\n    bytes_list = convert_to_bytes(data_list)\n    print(\"Bytes List:\", bytes_list)\n\n    # Example usage of merge_dictionaries\n    dict1 = {'a': 1, 'b': 2}\n    dict2 = {'b': 3, 'c': 4}\n    combined_dict = merge_dictionaries(dict1, dict2)\n    print(\"Combined Dictionary:\", combined_dict)\n\n    # Example usage of comprehension_example\n    some_dict = {'one': 1, 'two': 2, 'three': 3}\n    inverted_dict = comprehension_example(some_dict)\n    print(\"Inverted Dictionary:\", inverted_dict)\n",
    "tags": [
        "bytes",
        "ChainMap",
        "Comprehension",
        "Hard"
    ],
    "keywords": [
        "bytes",
        "ChainMap",
        "Comprehension"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "flake8"
}