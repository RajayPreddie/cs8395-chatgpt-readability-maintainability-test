{
    "id": "problem_17",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: GarbageCollection,Generator,Global state.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport gc\n\n\ndef garbage_collection_info():\n    \"\"\"Display information about the garbage collector.\"\"\"\n    # Force a garbage collection\n    gc.collect()\n    # Display garbage collector info\n    print(f\"Garbage collector thresholds: {gc.get_threshold()}\")\n    print(f\"Garbage collector stats: {gc.get_stats()}\")\n\n\ndef number_generator(limit):\n    \"\"\"A generator that yields numbers up to a given limit.\"\"\"\n    num = 0\n    while num < limit:\n        yield num\n        num += 1\n\n\nclass GlobalState:\n    \"\"\"Class to demonstrate handling of a global state.\"\"\"\n    _state = {}\n\n    @classmethod\n    def set_global_state(cls, key, value):\n        \"\"\"Set a value to the global state.\"\"\"\n        cls._state[key] = value\n\n    @classmethod\n    def get_global_state(cls, key):\n        \"\"\"Get a value from the global state.\"\"\"\n        return cls._state.get(key)\n\n\nif __name__ == \"__main__\":\n    # Garbage Collection\n    garbage_collection_info()\n\n    # Generator example\n    print(\"Generated numbers up to 10:\")\n    for number in number_generator(10):\n        print(number)\n\n    # Global state manipulation\n    GlobalState.set_global_state('theme', 'dark')\n    print(f\"The current theme is: {GlobalState.get_global_state('theme')}\")\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "flake8"
}