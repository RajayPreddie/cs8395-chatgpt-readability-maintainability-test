{
    "id": "problem_17",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: GarbageCollection,Generator,Global state.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport gc\nimport itertools\n\n\ndef garbage_collection_info():\n    \"\"\"Display information about garbage collection thresholds.\"\"\"\n    thresholds = gc.get_threshold()\n    print(f\"Garbage Collection thresholds: {thresholds}\")\n\n\ndef fibonacci_generator(limit):\n    \"\"\"A generator function that yields Fibonacci numbers up to a limit.\"\"\"\n    a, b = 0, 1\n    for _ in itertools.count():\n        if a > limit:\n            break\n        yield a\n        a, b = b, a + b\n\n\n# Global state to keep track of the current Fibonacci generator\ncurrent_fibonacci_generator = None\n\n\ndef reset_fibonacci_generator(limit):\n    \"\"\"Reset the global Fibonacci generator with a new limit.\"\"\"\n    global current_fibonacci_generator\n    current_fibonacci_generator = fibonacci_generator(limit)\n\n\ndef get_next_fibonacci():\n    \"\"\"Get the next Fibonacci number from the global generator.\"\"\"\n    global current_fibonacci_generator\n    if current_fibonacci_generator is None:\n        raise ValueError(\"The Fibonacci generator is not initialized.\")\n    try:\n        return next(current_fibonacci_generator)\n    except StopIteration:\n        return None\n\n\nif __name__ == \"__main__\":\n    # Example usage:\n    garbage_collection_info()\n    reset_fibonacci_generator(1000)\n    print(\"Fibonacci numbers up to 1000:\")\n    while True:\n        fib_number = get_next_fibonacci()\n        if fib_number is None:\n            break\n        print(fib_number, end=' ')\n    print()\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "flake8"
}