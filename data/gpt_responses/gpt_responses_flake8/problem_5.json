{
    "id": "problem_5",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\nimport concurrent.futures\nimport os\nimport sys\n\n\ndef get_environment_chain():\n    \"\"\"Get a ChainMap of the current environment and a custom dictionary.\"\"\"\n    custom_env = {'PATH': '/usr/local/bin', 'USER': 'admin'}\n    return ChainMap(os.environ, custom_env)\n\n\ndef calculate_squares(numbers):\n    \"\"\"Calculate the square of each number in a list using a comprehension.\"\"\"\n    return [number ** 2 for number in numbers]\n\n\ndef perform_concurrent_computation(data):\n    \"\"\"Perform concurrent computation of squares.\"\"\"\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_square = {executor.submit(calculate_squares, chunk): chunk for chunk in data}\n        for future in concurrent.futures.as_completed(future_to_square):\n            chunk = future_to_square[future]\n            try:\n                squares = future.result()\n            except Exception as exc:\n                print(f'Chunk {chunk} generated an exception: {exc}')\n            else:\n                print(f'Squares of {chunk} are {squares}')\n\n\ndef main():\n    \"\"\"Main function to demonstrate the use of ChainMap, Comprehension, and Concurrency.\"\"\"\n    if len(sys.argv) != 2:\n        print(\"Usage: python program.py <number_of_chunks>\")\n        sys.exit(1)\n\n    number_of_chunks = int(sys.argv[1])\n    data_chunks = [range(i * 10, (i + 1) * 10) for i in range(number_of_chunks)]\n\n    print(\"Environment and custom variables combined with ChainMap:\")\n    env_chain = get_environment_chain()\n    for key, value in env_chain.items():\n        print(f\"{key}={value}\")\n\n    print(\"\\nPerforming concurrent computation of squares:\")\n    perform_concurrent_computation(data_chunks)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "flake8"
}