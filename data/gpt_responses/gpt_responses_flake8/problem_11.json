{
    "id": "problem_11",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Decorator,DefaultDict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom functools import wraps\n\n\ndef count_calls(func):\n    \"\"\"Decorator that counts the number of times a function is called.\"\"\"\n    @wraps(func)\n    def wrapper_count_calls(*args, **kwargs):\n        wrapper_count_calls.calls += 1\n        return func(*args, **kwargs)\n\n    wrapper_count_calls.calls = 0\n    return wrapper_count_calls\n\n\n@count_calls\ndef process_data(data):\n    \"\"\"Process the data using defaultdict.\"\"\"\n    dd = defaultdict(int)\n    for item in data:\n        dd[item] += 1\n    return dict(dd)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    data_points = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n    processed_data = process_data(data_points)\n    print(f\"Processed Data: {processed_data}\")\n    print(f\"Function 'process_data' was called {process_data.calls} times.\")\n",
    "tags": [
        "Decorator",
        "DefaultDict",
        "Medium"
    ],
    "keywords": [
        "Decorator",
        "DefaultDict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "flake8"
}