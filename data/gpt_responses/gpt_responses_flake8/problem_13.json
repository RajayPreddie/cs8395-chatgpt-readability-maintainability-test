{
    "id": "problem_13",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DependencyInjection,Deque.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import deque\nfrom typing import Deque, List, Optional, Callable\n\n\nclass DependencyInjector:\n    def __init__(self):\n        self._dependencies = {}\n\n    def add_dependency(self, name: str, dependency: Callable):\n        self._dependencies[name] = dependency\n\n    def get_dependency(self, name: str) -> Callable:\n        return self._dependencies.get(name, lambda: None)\n\n\ndef max_in_sliding_window(numbers: List[int], window_size: int,\n                          injector: DependencyInjector) -> Optional[List[int]]:\n    \"\"\"\n    Find the maximum in each sliding window of size `window_size` in a list.\n    \"\"\"\n    if window_size <= 0 or not numbers or window_size > len(numbers):\n        return None\n\n    max_in_window = []\n    dq: Deque[int] = deque()\n\n    # Initialize deque with first window\n    for i in range(window_size):\n        while dq and numbers[i] >= numbers[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n\n    # Process the rest of the elements\n    for i in range(window_size, len(numbers)):\n        max_in_window.append(numbers[dq[0]])\n\n        # Remove elements outside of the current window\n        while dq and dq[0] <= i - window_size:\n            dq.popleft()\n\n        # Remove all elements smaller than the currently\n        # being added element (remove useless elements)\n        while dq and numbers[i] >= numbers[dq[-1]]:\n            dq.pop()\n\n        # Add current element at the rear of deque\n        dq.append(i)\n\n    # Add maximum of last window\n    max_in_window.append(numbers[dq[0]])\n\n    return max_in_window\n\n\n# Usage example with Dependency Injection\nif __name__ == \"__main__\":\n    injector = DependencyInjector()\n    injector.add_dependency('Deque', deque)\n\n    numbers = [1, 3, -1, -3, 5, 3, 6, 7]\n    window_size = 3\n    max_values = max_in_sliding_window(numbers, window_size, injector)\n    print(max_values)\n",
    "tags": [
        "DependencyInjection",
        "Deque",
        "Medium"
    ],
    "keywords": [
        "DependencyInjection",
        "Deque"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "flake8"
}