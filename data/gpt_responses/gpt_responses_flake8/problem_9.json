{
    "id": "problem_9",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Coroutine.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\n\nasync def compute_factorial(number):\n    \"\"\"Compute factorial of a given number using a coroutine.\"\"\"\n    factorial = 1\n    for i in range(2, number + 1):\n        factorial *= i\n        await asyncio.sleep(0.1)\n    return factorial\n\n\nasync def main():\n    \"\"\"Main coroutine which gets factorial for a list of numbers.\"\"\"\n    numbers = [5, 7, 10]\n    tasks = [asyncio.create_task(compute_factorial(num)) for num in numbers]\n\n    for num, task in zip(numbers, tasks):\n        factorial = await task\n        print(f\"The factorial of {num} is {factorial}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "Coroutine",
        "Easy"
    ],
    "keywords": [
        "Coroutine"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "flake8"
}