{
    "id": "problem_1",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: list.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef merge_sorted_lists(list1, list2):\n    \"\"\"\n    Merge two sorted lists into one sorted list.\n    \"\"\"\n    # Initialize the merged list and two pointers for each list\n    merged_list = []\n    index1, index2 = 0, 0\n\n    # Loop through both lists until we reach the end of one\n    while index1 < len(list1) and index2 < len(list2):\n        # Compare the elements at the current pointers\n        if list1[index1] < list2[index2]:\n            # Add the smaller element to the merged list\n            merged_list.append(list1[index1])\n            index1 += 1\n        else:\n            merged_list.append(list2[index2])\n            index2 += 1\n\n    # If there are remaining elements in list1, add them to the merged list\n    while index1 < len(list1):\n        merged_list.append(list1[index1])\n        index1 += 1\n\n    # If there are remaining elements in list2, add them to the merged list\n    while index2 < len(list2):\n        merged_list.append(list2[index2])\n        index2 += 1\n\n    return merged_list\n\n\n# Example usage\nif __name__ == \"__main__\":\n    sorted_list1 = [1, 3, 5, 7]\n    sorted_list2 = [2, 4, 6, 8]\n    print(merge_sorted_lists(sorted_list1, sorted_list2))\n",
    "tags": [
        "list",
        "Easy"
    ],
    "keywords": [
        "list"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "flake8"
}