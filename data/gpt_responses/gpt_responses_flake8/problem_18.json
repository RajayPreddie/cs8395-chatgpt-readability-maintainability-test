{
    "id": "problem_18",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\n\ndef generate_numbers(n):\n    \"\"\"Generator that yields the next number in a sequence starting from 0.\"\"\"\n    for i in range(n):\n        yield i\n\n\ndef process_numbers(generator):\n    \"\"\"Process numbers from a generator and maintain a global state of max numbers.\"\"\"\n    global max_numbers\n    max_numbers = []\n\n    for number in generator:\n        if len(max_numbers) < 3:\n            heapq.heappush(max_numbers, number)\n        else:\n            heapq.heappushpop(max_numbers, number)\n\n\ndef get_largest_numbers():\n    \"\"\"Return the largest numbers in the global state.\"\"\"\n    return sorted(max_numbers, reverse=True)\n\n\n# Main execution\nif __name__ == \"__main__\":\n    num_count = 10  # Example: generate 10 numbers\n    num_generator = generate_numbers(num_count)\n    process_numbers(num_generator)\n    largest_numbers = get_largest_numbers()\n    print(largest_numbers)\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "flake8"
}