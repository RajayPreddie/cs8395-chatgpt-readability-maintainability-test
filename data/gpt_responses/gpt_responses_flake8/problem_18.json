{
    "id": "problem_18",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\n\ndef generate_numbers(n, seed=0):\n    \"\"\"Generate a sequence of pseudo-random numbers.\"\"\"\n    for _ in range(n):\n        seed = (seed * 9301 + 49297) % 233280\n        yield seed / 233280\n\n\nclass MaxHeap:\n    \"\"\"A max-heap to keep track of the largest values seen.\"\"\"\n\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.data = []\n\n    def push(self, value):\n        \"\"\"Push a new value onto the heap, maintaining max-heap property.\"\"\"\n        if len(self.data) < self.capacity:\n            heapq.heappush(self.data, value)\n        else:\n            heapq.heappushpop(self.data, value)\n\n    def top(self):\n        \"\"\"Return the largest value, or None if the heap is empty.\"\"\"\n        return -self.data[0] if self.data else None\n\n\ndef find_global_max(numbers_generator, k):\n    \"\"\"Find the k largest numbers using a generator and global state.\"\"\"\n    max_heap = MaxHeap(k)\n    for number in numbers_generator:\n        max_heap.push(-number)  # Negate to use min-heap as max-heap\n    return -max_heap.top() if max_heap.top() else None\n\n\n# Example usage with Command Line Interface\nif __name__ == \"__main__\":\n    import sys\n\n    try:\n        n = int(sys.argv[1])\n        k = int(sys.argv[2])\n    except (IndexError, ValueError):\n        print(\"Usage: python program.py <number_of_elements> <k_largest_elements>\")\n        sys.exit(1)\n\n    numbers_gen = generate_numbers(n)\n    result = find_global_max(numbers_gen, k)\n    print(f\"The {k}-th largest generated number is: {result}\")\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "flake8"
}