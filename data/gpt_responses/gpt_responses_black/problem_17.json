{
    "id": "problem_17",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: GarbageCollection,Generator,Global state.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport gc\n\n\ndef garbage_collection_status():\n    \"\"\"\n    Print the current status of the garbage collection.\n    \"\"\"\n    print(\"Garbage collection enabled:\", gc.isenabled())\n    print(\"Garbage collection thresholds:\", gc.get_threshold())\n    print(\"Garbage collection stats:\", gc.get_stats())\n\n\ndef fibonacci_generator(limit):\n    \"\"\"\n    A generator function that yields Fibonacci numbers up to a given limit.\n    \"\"\"\n    a, b = 0, 1\n    while a < limit:\n        yield a\n        a, b = b, a + b\n\n\nglobal_state = {}\n\n\ndef update_global_state(key, value):\n    \"\"\"\n    Update a key-value pair in the global state dictionary.\n    \"\"\"\n    global_state[key] = value\n\n\ndef print_global_state():\n    \"\"\"\n    Print the current global state dictionary.\n    \"\"\"\n    print(\"Current global state:\", global_state)\n\n\nif __name__ == \"__main__\":\n    garbage_collection_status()\n\n    print(\"\\nFibonacci numbers up to 100:\")\n    for number in fibonacci_generator(100):\n        print(number, end=\" \")\n\n    print(\"\\n\\nUpdating global state...\")\n    update_global_state(\"user\", \"Alice\")\n    update_global_state(\"access_level\", \"admin\")\n    print_global_state()\n\n    # Perform manual garbage collection\n    print(\"\\nPerforming manual garbage collection...\")\n    gc.collect()\n    garbage_collection_status()\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}