{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes,ChainMap,Comprehension.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\nimport os\nimport argparse\n\ndef main():\n    # Create a parser for command line arguments\n    parser = argparse.ArgumentParser(description=\"Process some integers.\")\n    parser.add_argument(\n        \"integers\", metavar=\"N\", type=int, nargs=\"+\", help=\"an integer for the accumulator\"\n    )\n    parser.add_argument(\n        \"--sum\", dest=\"accumulate\", action=\"store_const\", const=sum, default=max,\n        help=\"sum the integers (default: find the max)\"\n    )\n\n    args = parser.parse_args()\n\n    # Use a comprehension to create a bytes object from the integers\n    bytes_object = bytes([b for b in args.integers if 0 <= b <= 255])\n\n    # ChainMap to combine os.environ with the command line arguments\n    combined_map = ChainMap(vars(args), os.environ)\n\n    # Output the results\n    print(f\"Bytes object: {bytes_object}\")\n    print(f\"Combined Map: {dict(combined_map)}\")\n\n    # Perform the operation specified by the command line arguments\n    result = args.accumulate(args.integers)\n    print(f\"Result: {result}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytes",
        "ChainMap",
        "Comprehension",
        "Hard"
    ],
    "keywords": [
        "bytes",
        "ChainMap",
        "Comprehension"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}