{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport os\n\n\ndef generate_random_bytes(size: int) -> bytes:\n    \"\"\"\n    Generate a random sequence of bytes of the given size.\n\n    Args:\n    size (int): The number of random bytes to generate.\n\n    Returns:\n    bytes: A bytes object containing random bytes.\n    \"\"\"\n    return os.urandom(size)\n\n\ndef bytes_to_hex_string(random_bytes: bytes) -> str:\n    \"\"\"\n    Convert bytes to a hexadecimal string representation.\n\n    Args:\n    random_bytes (bytes): The bytes to convert.\n\n    Returns:\n    str: The hexadecimal string representation of the bytes.\n    \"\"\"\n    return random_bytes.hex()\n\n\ndef main():\n    size = int(input(\"Enter the number of random bytes to generate: \"))\n    random_bytes = generate_random_bytes(size)\n    hex_string = bytes_to_hex_string(random_bytes)\n    print(f\"Random bytes in hexadecimal: {hex_string}\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytes",
        "Easy"
    ],
    "keywords": [
        "bytes"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "black"
}