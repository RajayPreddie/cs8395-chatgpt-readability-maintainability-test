{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef count_bytes_in_file(file_path):\n    \"\"\"\n    Count the number of bytes in the given file.\n\n    Args:\n    file_path (str): The path to the file.\n\n    Returns:\n    int: The number of bytes in the file.\n    \"\"\"\n    try:\n        with open(file_path, \"rb\") as file:\n            file_content = file.read()\n            return len(file_content)\n    except FileNotFoundError:\n        print(f\"The file {file_path} was not found.\")\n        return None\n    except IOError as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n\ndef main():\n    file_path = input(\"Enter the path to the file: \")\n    num_bytes = count_bytes_in_file(file_path)\n    if num_bytes is not None:\n        print(f\"The file contains {num_bytes} bytes.\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytes",
        "Easy"
    ],
    "keywords": [
        "bytes"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "black"
}