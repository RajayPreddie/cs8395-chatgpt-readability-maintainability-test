{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes,ChainMap,Comprehension.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\nimport os\nimport argparse\n\n\ndef merge_configurations(default_config, env_config, cli_config):\n    # Create a ChainMap to prioritize configurations\n    config = ChainMap(cli_config, env_config, default_config)\n    return config\n\n\ndef bytes_comprehension_to_hex_list(bytes_obj):\n    # List comprehension to convert bytes to a list of hex values\n    return [f\"{byte:02x}\" for byte in bytes_obj]\n\n\ndef main():\n    # Define default configuration\n    default_config = {\"timeout\": 120, \"host\": \"localhost\", \"port\": 8080}\n\n    # Get environment configurations\n    env_config = {\n        key: os.getenv(key)\n        for key in default_config.keys()\n        if os.getenv(key) is not None\n    }\n\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(description=\"Process configurations.\")\n    parser.add_argument(\"--timeout\", type=int, help=\"Set the timeout value\")\n    parser.add_argument(\"--host\", type=str, help=\"Set the host address\")\n    parser.add_argument(\"--port\", type=int, help=\"Set the port number\")\n    args = parser.parse_args()\n    cli_config = {key: value for key, value in vars(args).items() if value is not None}\n\n    # Merge configurations\n    config = merge_configurations(default_config, env_config, cli_config)\n    print(\"Effective Configuration:\", config)\n\n    # Example bytes object\n    example_bytes = b\"\\x12\\x34\\x56\\x78\\x9A\\xBC\\xDE\\xF0\"\n    hex_list = bytes_comprehension_to_hex_list(example_bytes)\n    print(\"Bytes to Hex List:\", hex_list)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytes",
        "ChainMap",
        "Comprehension",
        "Hard"
    ],
    "keywords": [
        "bytes",
        "ChainMap",
        "Comprehension"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}