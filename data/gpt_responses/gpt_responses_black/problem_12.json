{
    "id": "problem_12",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DefaultDict,DependencyInjection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom typing import Callable, Dict, Any\n\n\nclass ServiceContainer:\n    def __init__(self):\n        self.services = defaultdict(lambda: None)\n        self.factories = {}\n\n    def add_service(self, name: str, service: Any):\n        self.services[name] = service\n\n    def add_factory(self, name: str, factory: Callable):\n        self.factories[name] = factory\n\n    def get_service(self, name: str):\n        service = self.services[name]\n        if service is None and name in self.factories:\n            service = self.factories[name](self)\n            self.services[name] = service\n        return service\n\n\nclass SomeDependency:\n    def perform_task(self):\n        return \"Task completed!\"\n\n\nclass ClientClass:\n    def __init__(self, dependency_injector: ServiceContainer):\n        self.dependency = dependency_injector.get_service(\"some_dependency\")\n\n    def do_something(self):\n        if self.dependency:\n            return self.dependency.perform_task()\n        else:\n            return \"No dependency available.\"\n\n\ndef dependency_factory(container: ServiceContainer):\n    return SomeDependency()\n\n\ndef main():\n    container = ServiceContainer()\n    container.add_factory(\"some_dependency\", dependency_factory)\n    client = ClientClass(container)\n    result = client.do_something()\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "DefaultDict",
        "DependencyInjection",
        "Medium"
    ],
    "keywords": [
        "DefaultDict",
        "DependencyInjection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "black"
}