{
    "id": "problem_12",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DefaultDict,DependencyInjection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom typing import Callable, Dict, Any\n\n\nclass Service:\n    def __init__(self, name: str):\n        self.name = name\n\n    def perform_task(self):\n        return f\"Service {self.name} is performing its task.\"\n\n\nclass DependencyInjector:\n    def __init__(self):\n        self._services = defaultdict(lambda: None)\n\n    def add_service(self, identifier: str, service: Callable):\n        self._services[identifier] = service\n\n    def get_service(self, identifier: str) -> Any:\n        return self._services[identifier]()\n\n    def remove_service(self, identifier: str):\n        del self._services[identifier]\n\n\ndef main():\n    injector = DependencyInjector()\n\n    # Add services to the injector\n    injector.add_service(\"email\", lambda: Service(\"Email\"))\n    injector.add_service(\"logging\", lambda: Service(\"Logging\"))\n\n    # Retrieve a service and use it\n    email_service = injector.get_service(\"email\")\n    if email_service:\n        print(email_service.perform_task())\n\n    # Remove a service\n    injector.remove_service(\"email\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "DefaultDict",
        "DependencyInjection",
        "Medium"
    ],
    "keywords": [
        "DefaultDict",
        "DependencyInjection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "black"
}