{
    "id": "problem_13",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DependencyInjection,Deque.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import deque\nfrom typing import Any, Callable\n\nclass DependencyInjector:\n    def __init__(self):\n        self.dependencies = {}\n\n    def add_dependency(self, name: str, dependency: Any):\n        self.dependencies[name] = dependency\n\n    def get_dependency(self, name: str):\n        return self.dependencies.get(name, None)\n\n    def inject(self, func: Callable):\n        def wrapper(*args, **kwargs):\n            injected_args = [\n                self.get_dependency(name) if name in self.dependencies else arg\n                for arg in args\n            ]\n            injected_kwargs = {\n                k: self.get_dependency(k) if k in self.dependencies else v\n                for k, v in kwargs.items()\n            }\n            return func(*injected_args, **injected_kwargs)\n\n        return wrapper\n\nclass TaskQueue:\n    def __init__(self):\n        self._queue = deque()\n\n    def add_task(self, task: Callable):\n        self._queue.append(task)\n\n    def run_next_task(self):\n        if self._queue:\n            task = self._queue.popleft()\n            task()\n\n    def run_all_tasks(self):\n        while self._queue:\n            self.run_next_task()\n\n# Example usage\nif __name__ == \"__main__\":\n    injector = DependencyInjector()\n    task_queue = TaskQueue()\n\n    def greet(name: str):\n        print(f\"Hello, {name}!\")\n\n    # Registering the dependency\n    injector.add_dependency(\"name\", \"World\")\n\n    # Injecting the 'name' dependency into the greet function\n    injected_greet = injector.inject(greet)\n\n    # Adding the injected greet function to the task queue\n    task_queue.add_task(lambda: injected_greet())\n\n    # Running all tasks in the queue\n    task_queue.run_all_tasks()\n",
    "tags": [
        "DependencyInjection",
        "Deque",
        "Medium"
    ],
    "keywords": [
        "DependencyInjection",
        "Deque"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "black"
}