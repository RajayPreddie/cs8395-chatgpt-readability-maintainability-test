{
    "id": "problem_19",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Global state,heapq,IdiomaticPython.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\nclass GlobalState:\n    def __init__(self):\n        self._state_heap = []\n\n    def add_state_value(self, value):\n        heapq.heappush(self._state_heap, value)\n\n    def get_lowest_state_value(self):\n        if self._state_heap:\n            return heapq.heappop(self._state_heap)\n        else:\n            raise ValueError(\"The global state is empty.\")\n\n    def __str__(self):\n        return f\"GlobalState({self._state_heap})\"\n\ndef main():\n    global_state = GlobalState()\n    global_state.add_state_value(10)\n    global_state.add_state_value(5)\n    global_state.add_state_value(15)\n    \n    print(\"Initial global state:\", global_state)\n    \n    try:\n        while True:\n            lowest_value = global_state.get_lowest_state_value()\n            print(f\"Removed lowest value: {lowest_value}\")\n            print(\"Current global state:\", global_state)\n    except ValueError as e:\n        print(e)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}