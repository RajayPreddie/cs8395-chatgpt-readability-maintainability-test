{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\nimport concurrent.futures\nimport os\nimport requests\n\ndef fetch_url(url):\n    try:\n        response = requests.get(url)\n        return {url: response.status_code}\n    except requests.exceptions.RequestException as e:\n        return {url: str(e)}\n\ndef concurrent_url_checker(url_list):\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_url = {executor.submit(fetch_url, url): url for url in url_list}\n        results = {}\n        for future in concurrent.futures.as_completed(future_to_url):\n            url = future_to_url[future]\n            try:\n                result = future.result()\n            except Exception as exc:\n                results[url] = str(exc)\n            else:\n                results.update(result)\n        return results\n\ndef main():\n    env_vars = os.environ\n    default_vars = {'DEFAULT_TIMEOUT': '5', 'DEFAULT_RETRIES': '3'}\n    config = ChainMap(env_vars, default_vars)\n\n    timeout = int(config['DEFAULT_TIMEOUT'])\n    retries = int(config['DEFAULT_RETRIES'])\n    requests.adapters.DEFAULT_RETRIES = retries\n    requests.adapters.HTTPAdapter(max_retries=retries)\n\n    urls = [\n        \"http://example.com\",\n        \"http://nonexistent.url\",\n        \"https://httpbin.org/status/404\",\n        \"https://httpbin.org/status/200\",\n    ]\n\n    status_codes = concurrent_url_checker(urls)\n    print(status_codes)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}