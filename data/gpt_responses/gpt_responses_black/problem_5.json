{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\nimport concurrent.futures\nimport os\nimport argparse\n\n\ndef get_combined_environment(chainmaps):\n    combined_env = {}\n    for cm in chainmaps:\n        combined_env.update(cm)\n    return combined_env\n\n\ndef environment_comprehension(chainmaps):\n    return {k: v for cm in chainmaps for k, v in cm.items()}\n\n\ndef fetch_env_data(concurrency_level):\n    with concurrent.futures.ThreadPoolExecutor(max_workers=concurrency_level) as executor:\n        future_to_env = {\n            executor.submit(os.environ.copy): i for i in range(concurrency_level)\n        }\n        return [future.result() for future in concurrent.futures.as_completed(future_to_env)]\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Process some integers.\")\n    parser.add_argument(\n        \"--concurrency\",\n        type=int,\n        default=4,\n        help=\"the number of concurrent fetches\",\n    )\n    args = parser.parse_args()\n\n    chainmaps = fetch_env_data(args.concurrency)\n    combined_env = get_combined_environment(chainmaps)\n    env_comprehension = environment_comprehension(chainmaps)\n\n    print(\"Combined Environment using ChainMap:\")\n    print(combined_env)\n    print(\"\\nCombined Environment using Comprehension:\")\n    print(env_comprehension)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}