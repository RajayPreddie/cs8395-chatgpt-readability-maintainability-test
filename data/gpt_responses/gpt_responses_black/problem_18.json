{
    "id": "problem_18",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\n# Global state to keep track of the numbers in the heap\n_min_heap = []\n\n\ndef add_number_to_heap(number):\n    \"\"\"\n    Add a number to the global min heap.\n    \"\"\"\n    heapq.heappush(_min_heap, number)\n\n\ndef get_smallest_numbers(n):\n    \"\"\"\n    Get the n smallest numbers from the global min heap using a generator.\n    \"\"\"\n    # Create a shallow copy of the heap to avoid modifying the original heap\n    heap_copy = _min_heap[:]\n    for _ in range(n):\n        if heap_copy:\n            yield heapq.heappop(heap_copy)\n        else:\n            break\n\n\ndef main():\n    # Example usage\n    numbers = [15, 3, 12, 6, 9, 0, -5, 1]\n    for number in numbers:\n        add_number_to_heap(number)\n\n    print(\"The 5 smallest numbers in the heap are:\")\n    for small_number in get_smallest_numbers(5):\n        print(small_number)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "black"
}