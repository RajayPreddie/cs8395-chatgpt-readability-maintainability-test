{
    "id": "problem_2",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the Black coding style. Here's an example snippet formatted using Black:\n\ndef format_name(first_name, last_name):\n    formatted_first_name = first_name.strip().title()\n    formatted_last_name = last_name.strip().title()\n    return f\"{formatted_first_name} {formatted_last_name}\"\n\nEnsure the code is formatted according to Black's uncompromising style. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: asyncio.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nasync def fetch_data():\n    print(\"Start fetching data...\")\n    await asyncio.sleep(2)  # Simulate a network delay\n    print(\"Data fetched successfully.\")\n    return {'data': 42}\n\nasync def process_data():\n    print(\"Start processing data...\")\n    data = await fetch_data()\n    await asyncio.sleep(1)  # Simulate data processing time\n    processed_data = data['data'] * 2\n    print(f\"Data processed: {processed_data}\")\n    return processed_data\n\nasync def main():\n    processed_data = await process_data()\n    print(f\"Final result: {processed_data}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "black"
}