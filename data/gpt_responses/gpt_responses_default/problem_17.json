{
    "id": "problem_17",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: GarbageCollection,Generator,Global state.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport gc\n\n# Enable automatic garbage collection\ngc.enable()\n\n# Global state to keep track of created objects\nglobal_state = {\n    'created_objects': 0\n}\n\ndef object_counter_decorator(func):\n    \"\"\"\n    Decorator to count the number of objects created by a generator.\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        global_state['created_objects'] += 1\n        for obj in func(*args, **kwargs):\n            yield obj\n        global_state['created_objects'] -= 1\n        if global_state['created_objects'] == 0:\n            print(\"All generated objects have been processed. Running garbage collection.\")\n            gc.collect()\n    return wrapper\n\n@object_counter_decorator\ndef generate_data(limit):\n    \"\"\"\n    Generator to create dummy data up to a specified limit.\n    \"\"\"\n    for i in range(limit):\n        yield f\"Data-{i}\"\n\ndef main():\n    # Generate data using the generator\n    for data in generate_data(10):\n        print(data)\n\n    # Check the global state after processing\n    print(f\"Global state: {global_state}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}