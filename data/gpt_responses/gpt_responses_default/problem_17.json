{
    "id": "problem_17",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: GarbageCollection,Generator,Global state.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport gc\n\n# Global state to keep track of created objects\ncreated_objects = []\n\n# Generator to create objects and track them in the global state\ndef object_generator(limit):\n    class CustomObject:\n        def __init__(self, id):\n            self.id = id\n        def __repr__(self):\n            return f\"CustomObject({self.id})\"\n\n    for i in range(limit):\n        obj = CustomObject(i)\n        created_objects.append(obj)\n        yield obj\n        # Force garbage collection for demonstration purposes\n        gc.collect()\n\n# Function to demonstrate Garbage Collection\ndef garbage_collection_demo():\n    print(\"Starting garbage collection demonstration...\")\n    \n    # Set the garbage collector's debug flags (optional)\n    gc.set_debug(gc.DEBUG_LEAK)\n    \n    # Create objects using the generator\n    print(\"Creating objects...\")\n    for obj in object_generator(10):\n        print(f\"Created {obj}\")\n\n    # Manually start the garbage collection process\n    print(\"Starting garbage collection...\")\n    collected = gc.collect()\n    print(f\"Garbage collector: collected {collected} objects.\")\n\n    # Display remaining objects\n    print(\"Remaining objects:\")\n    for obj in created_objects:\n        print(obj)\n\nif __name__ == \"__main__\":\n    garbage_collection_demo()\n",
    "tags": [
        "GarbageCollection",
        "Generator",
        "Global state",
        "Hard"
    ],
    "keywords": [
        "GarbageCollection",
        "Generator",
        "Global state"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}