{
    "id": "problem_9",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Coroutine.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nasync def producer(queue, n):\n    for i in range(n):\n        # simulate some production of data\n        await asyncio.sleep(1)\n        print(f'Produced item {i}')\n        await queue.put(i)\n\nasync def consumer(queue):\n    while True:\n        # wait for an item from the producer\n        item = await queue.get()\n        print(f'Consumed item {item}')\n        # simulate some task with the item\n        await asyncio.sleep(2)\n        # Notify the queue that the item has been processed\n        queue.task_done()\n\nasync def main():\n    # Create a queue that we will use to store our \"workload\".\n    queue = asyncio.Queue()\n\n    # Fire up the both coroutines\n    producer_coro = asyncio.create_task(producer(queue, 5))\n    consumer_coro = asyncio.create_task(consumer(queue))\n\n    # Wait for the producer to put all its items\n    await producer_coro\n\n    # Wait until the consumer has processed all items\n    await queue.join()\n\n    # The consumer is still running, therefore we stop it manually\n    consumer_coro.cancel()\n\n# Python 3.7+\nasyncio.run(main())\n",
    "tags": [
        "Coroutine",
        "Easy"
    ],
    "keywords": [
        "Coroutine"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "default"
}