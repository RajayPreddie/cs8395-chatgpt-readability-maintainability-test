{
    "id": "problem_9",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Coroutine.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nasync def producer(queue, n):\n    for i in range(n):\n        # Simulate some work\n        await asyncio.sleep(1)\n        print(f'Produced item {i}')\n        await queue.put(i)\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        # Simulate some work\n        await asyncio.sleep(2)\n        print(f'Consumed item {item}')\n        queue.task_done()\n\nasync def main():\n    queue = asyncio.Queue()\n\n    # Launch the producer and consumer coroutines\n    producer_coro = producer(queue, 5)\n    consumer_coro = consumer(queue)\n\n    # Run both the producer and consumer until the producer is done\n    await asyncio.gather(producer_coro, consumer_coro)\n\n    # Wait until the consumer has processed all items\n    await queue.join()\n\n    # The consumer is still running, so we stop it manually\n    consumer_coro.close()\n\n# Python 3.7+\nasyncio.run(main())\n",
    "tags": [
        "Coroutine",
        "Easy"
    ],
    "keywords": [
        "Coroutine"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "default"
}