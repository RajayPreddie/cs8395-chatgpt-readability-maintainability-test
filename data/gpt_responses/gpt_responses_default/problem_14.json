{
    "id": "problem_14",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Deque,dict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import deque\n\ndef recent_items_tracker():\n    # Initialize a deque with a fixed size\n    MAX_RECENT_ITEMS = 5\n    recent_items = deque(maxlen=MAX_RECENT_ITEMS)\n\n    # Initialize a dictionary to store item counts\n    item_counts = dict()\n\n    while True:\n        # Get user input\n        user_input = input(\"Enter an item (or 'exit' to quit): \")\n\n        # Exit condition\n        if user_input.lower() == 'exit':\n            break\n\n        # Add the item to the recent items deque\n        recent_items.appendleft(user_input)\n\n        # Update the item count in the dictionary\n        if user_input in item_counts:\n            item_counts[user_input] += 1\n        else:\n            item_counts[user_input] = 1\n\n        # Print the list of recent items\n        print(\"Recent items (up to 5):\")\n        for item in recent_items:\n            print(item)\n\n        # Print the count of each item entered\n        print(\"Item counts:\")\n        for item, count in item_counts.items():\n            print(f\"{item}: {count}\")\n\nif __name__ == \"__main__\":\n    recent_items_tracker()\n",
    "tags": [
        "Deque",
        "dict",
        "Medium"
    ],
    "keywords": [
        "Deque",
        "dict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "default"
}