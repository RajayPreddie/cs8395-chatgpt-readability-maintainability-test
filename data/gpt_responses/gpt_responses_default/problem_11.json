{
    "id": "problem_11",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Decorator,DefaultDict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom functools import wraps\nimport time\n\ndef timing_decorator(func):\n    \"\"\"Decorator to measure the execution time of a function.\"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"Function {func.__name__!r} executed in {(end_time - start_time):.4f}s\")\n        return result\n    return wrapper\n\nclass Inventory:\n    def __init__(self):\n        self._items = defaultdict(int)\n\n    def add_item(self, item, quantity):\n        self._items[item] += quantity\n\n    def remove_item(self, item, quantity):\n        if self._items[item] >= quantity:\n            self._items[item] -= quantity\n        else:\n            print(f\"Not enough {item} in inventory to remove {quantity}.\")\n\n    def get_inventory(self):\n        return dict(self._items)\n\n@timing_decorator\ndef process_inventory_actions(inventory, actions):\n    for action, item, quantity in actions:\n        if action == 'add':\n            inventory.add_item(item, quantity)\n        elif action == 'remove':\n            inventory.remove_item(item, quantity)\n        else:\n            print(f\"Unknown action '{action}'\")\n\nif __name__ == \"__main__\":\n    inv = Inventory()\n    actions = [\n        ('add', 'apple', 5),\n        ('add', 'banana', 3),\n        ('remove', 'apple', 2),\n        ('add', 'orange', 10),\n        ('remove', 'banana', 1),\n    ]\n\n    process_inventory_actions(inv, actions)\n    print(inv.get_inventory())\n",
    "tags": [
        "Decorator",
        "DefaultDict",
        "Medium"
    ],
    "keywords": [
        "Decorator",
        "DefaultDict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "default"
}