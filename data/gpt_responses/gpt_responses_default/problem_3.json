{
    "id": "problem_3",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytearray.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef modify_bytearray(data, index, new_value):\n    \"\"\"\n    Modifies a bytearray at the specified index with a new value.\n    \n    :param data: bytearray to modify\n    :param index: position to modify\n    :param new_value: new byte value to insert\n    :return: modified bytearray\n    \"\"\"\n    if not isinstance(data, bytearray):\n        raise TypeError(\"Data must be a bytearray\")\n    \n    if not (0 <= index < len(data)):\n        raise IndexError(\"Index out of range\")\n    \n    if not (0 <= new_value <= 255):\n        raise ValueError(\"New value must be in byte range (0-255)\")\n    \n    data[index] = new_value\n    return data\n\ndef main():\n    # Example usage\n    data = bytearray(b'Hello World!')\n    print(\"Original bytearray:\", data)\n    \n    index_to_modify = 7\n    new_byte_value = ord('P')  # Replace 'o' with 'P' in \"World\"\n    \n    try:\n        modified_data = modify_bytearray(data, index_to_modify, new_byte_value)\n        print(\"Modified bytearray:\", modified_data)\n    except (TypeError, IndexError, ValueError) as e:\n        print(\"Error:\", e)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytearray",
        "Easy"
    ],
    "keywords": [
        "bytearray"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "default"
}