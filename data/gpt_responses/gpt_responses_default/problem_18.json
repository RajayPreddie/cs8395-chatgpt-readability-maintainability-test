{
    "id": "problem_18",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\ndef merge_sorted_streams(*iterables):\n    \"\"\"\n    Generator function that merges multiple sorted inputs into a single sorted output.\n    Uses a min heap to ensure that the smallest items are always popped first.\n    \"\"\"\n    min_heap = []\n    iterators = [iter(it) for it in iterables]\n\n    # Initialize heap with the first element from each iterator\n    for i, it in enumerate(iterators):\n        try:\n            first_element = next(it)\n            heapq.heappush(min_heap, (first_element, i))\n        except StopIteration:\n            pass  # Ignore empty iterators\n\n    while min_heap:\n        value, it_index = heapq.heappop(min_heap)\n        yield value\n        try:\n            next_value = next(iterators[it_index])\n            heapq.heappush(min_heap, (next_value, it_index))\n        except StopIteration:\n            pass  # No more elements in this iterator\n\nif __name__ == \"__main__\":\n    # Example usage: merge sorted lists using the generator\n    sorted_list1 = [1, 4, 7]\n    sorted_list2 = [2, 5, 8]\n    sorted_list3 = [3, 6, 9]\n\n    # Merge the lists using the generator\n    merged_generator = merge_sorted_streams(sorted_list1, sorted_list2, sorted_list3)\n\n    # Print the merged, sorted output\n    for number in merged_generator:\n        print(number)\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}