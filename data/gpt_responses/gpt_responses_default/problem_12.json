{
    "id": "problem_12",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DefaultDict,DependencyInjection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom typing import Callable, Dict, List\n\nclass DependencyInjector:\n    def __init__(self):\n        self.dependencies = defaultdict(lambda: None)\n\n    def add_dependency(self, name: str, dependency: Callable):\n        self.dependencies[name] = dependency\n\n    def get_dependency(self, name: str):\n        return self.dependencies[name]()\n\nclass ServiceA:\n    def do_work(self):\n        return \"Service A is working\"\n\nclass ServiceB:\n    def __init__(self, service_a: ServiceA):\n        self.service_a = service_a\n\n    def do_work(self):\n        return f\"Service B is working with {self.service_a.do_work()}\"\n\ndef service_a_factory():\n    return ServiceA()\n\ndef service_b_factory(injector: DependencyInjector):\n    service_a = injector.get_dependency('service_a')\n    return ServiceB(service_a)\n\ndef main():\n    injector = DependencyInjector()\n    injector.add_dependency('service_a', service_a_factory)\n    injector.add_dependency('service_b', lambda: service_b_factory(injector))\n\n    service_b = injector.get_dependency('service_b')\n    print(service_b.do_work())\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "DefaultDict",
        "DependencyInjection",
        "Medium"
    ],
    "keywords": [
        "DefaultDict",
        "DependencyInjection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "default"
}