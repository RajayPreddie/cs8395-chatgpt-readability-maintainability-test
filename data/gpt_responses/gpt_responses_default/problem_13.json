{
    "id": "problem_13",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DependencyInjection,Deque.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import deque\nfrom typing import Any, Deque\n\nclass MessageQueue:\n    def __init__(self) -> None:\n        self._queue: Deque[str] = deque()\n\n    def enqueue(self, message: str) -> None:\n        self._queue.append(message)\n\n    def dequeue(self) -> str:\n        if not self.is_empty():\n            return self._queue.popleft()\n        raise IndexError(\"Dequeue from an empty queue\")\n\n    def is_empty(self) -> bool:\n        return len(self._queue) == 0\n\nclass Consumer:\n    def __init__(self, message_queue: MessageQueue) -> None:\n        self._message_queue = message_queue\n\n    def process_next_message(self) -> None:\n        if not self._message_queue.is_empty():\n            message = self._message_queue.dequeue()\n            print(f\"Processing message: {message}\")\n        else:\n            print(\"No messages to process\")\n\nclass Producer:\n    def __init__(self, message_queue: MessageQueue) -> None:\n        self._message_queue = message_queue\n\n    def produce_message(self, message: str) -> None:\n        self._message_queue.enqueue(message)\n        print(f\"Produced message: {message}\")\n\n# Dependency Injection Example\nif __name__ == \"__main__\":\n    queue = MessageQueue()\n    producer = Producer(queue)\n    consumer = Consumer(queue)\n\n    # Simulate producing and consuming messages\n    producer.produce_message(\"Hello, World!\")\n    producer.produce_message(\"Dependency Injection with Deque\")\n    consumer.process_next_message()\n    consumer.process_next_message()\n",
    "tags": [
        "DependencyInjection",
        "Deque",
        "Medium"
    ],
    "keywords": [
        "DependencyInjection",
        "Deque"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "default"
}