{
    "id": "problem_7",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport concurrent.futures\nimport time\n\ndef perform_task(task_number):\n    print(f\"Task {task_number}: Starting\")\n    time.sleep(2)  # Simulating a time-consuming task\n    print(f\"Task {task_number}: Completed\")\n    return f\"Result of Task {task_number}\"\n\ndef main():\n    # Using ThreadPoolExecutor to demonstrate concurrency\n    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n        # Submit tasks to the executor\n        futures = [executor.submit(perform_task, task_number) for task_number in range(1, 11)]\n\n        # Retrieve results as tasks are completed\n        for future in concurrent.futures.as_completed(futures):\n            print(future.result())\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Concurrency",
        "Easy"
    ],
    "keywords": [
        "Concurrency"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "default"
}