{
    "id": "problem_7",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport concurrent.futures\nimport time\n\ndef simulate_heavy_computation(seconds):\n    print(f\"Starting a heavy task for {seconds} second(s).\")\n    time.sleep(seconds)\n    return f\"Finished task that took {seconds} second(s).\"\n\ndef main():\n    # List of tasks with different durations\n    tasks = [5, 3, 6, 2]\n    \n    # Using ThreadPoolExecutor to manage concurrency\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        # Schedule the simulate_heavy_computation function to be executed concurrently\n        future_tasks = [executor.submit(simulate_heavy_computation, sec) for sec in tasks]\n        \n        # Wait for all the tasks to complete and print their results\n        for future in concurrent.futures.as_completed(future_tasks):\n            try:\n                result = future.result()\n                print(result)\n            except Exception as e:\n                print(f\"Generated an exception: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Concurrency",
        "Easy"
    ],
    "keywords": [
        "Concurrency"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "default"
}