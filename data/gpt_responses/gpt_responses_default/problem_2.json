{
    "id": "problem_2",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: asyncio.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\nimport random\nimport time\n\nasync def simulate_long_running_task(name, duration):\n    print(f\"Task {name}: Started with duration {duration}s\")\n    await asyncio.sleep(duration)\n    print(f\"Task {name}: Completed after {duration}s\")\n    return f\"Result of {name}\"\n\nasync def main():\n    tasks = []\n    for i in range(5):\n        duration = random.uniform(1, 5)\n        task = asyncio.create_task(simulate_long_running_task(f\"Task-{i}\", duration))\n        tasks.append(task)\n    \n    results = await asyncio.gather(*tasks)\n    print(\"All tasks completed.\")\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    asyncio.run(main())\n    elapsed_time = time.time() - start_time\n    print(f\"Program executed in {elapsed_time:.2f} seconds\")\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "default"
}