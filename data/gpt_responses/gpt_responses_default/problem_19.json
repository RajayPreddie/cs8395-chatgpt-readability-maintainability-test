{
    "id": "problem_19",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Global state,heapq,IdiomaticPython.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\n# Global state to maintain the min heap\nmin_heap = []\n\ndef add_number(number):\n    \"\"\"\n    Adds a number to the min heap.\n    \"\"\"\n    heapq.heappush(min_heap, number)\n\ndef get_smallest():\n    \"\"\"\n    Returns the smallest number from the min heap without removing it.\n    \"\"\"\n    if min_heap:\n        return min_heap[0]\n    return None\n\ndef remove_smallest():\n    \"\"\"\n    Removes and returns the smallest number from the min heap.\n    \"\"\"\n    if min_heap:\n        return heapq.heappop(min_heap)\n    return None\n\ndef main():\n    # Idiomatic Python: using a list comprehension for input handling\n    numbers = [int(x) for x in input(\"Enter numbers separated by spaces: \").split()]\n    \n    for number in numbers:\n        add_number(number)\n    \n    print(\"The smallest number in the heap is:\", get_smallest())\n    \n    print(\"Removing smallest numbers from the heap:\")\n    while min_heap:\n        print(remove_smallest(), end=' ')\n    print()\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}