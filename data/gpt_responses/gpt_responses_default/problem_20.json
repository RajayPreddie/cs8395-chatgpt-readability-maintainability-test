{
    "id": "problem_20",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: heapq,IdiomaticPython,Introspection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\ndef find_k_largest_numbers(nums, k):\n    \"\"\"\n    Find the k largest numbers in a list using a min-heap.\n    \"\"\"\n    if k <= 0:\n        return []\n\n    # Create a min-heap with the first k elements of the list\n    min_heap = nums[:k]\n    heapq.heapify(min_heap)\n\n    # Iterate over the remaining elements\n    for num in nums[k:]:\n        # If the current number is greater than the smallest in the heap\n        if num > min_heap[0]:\n            # Replace the smallest element with the current number and heapify\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n\n    # Return the k largest elements\n    return min_heap\n\ndef main():\n    # Example usage:\n    nums = [3, 1, 5, 12, 2, 11]\n    k = 3\n    print(\"The {} largest numbers are: {}\".format(k, find_k_largest_numbers(nums, k)))\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "heapq",
        "IdiomaticPython",
        "Introspection",
        "Hard"
    ],
    "keywords": [
        "heapq",
        "IdiomaticPython",
        "Introspection"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}