{
    "id": "problem_5",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport argparse\nfrom collections import ChainMap\nimport concurrent.futures\nimport os\n\ndef merge_dictionaries(dict1, dict2):\n    \"\"\"Merge two dictionaries using ChainMap\"\"\"\n    return ChainMap(dict1, dict2)\n\ndef count_even_numbers(numbers):\n    \"\"\"Count even numbers in a list using list comprehension\"\"\"\n    return sum(1 for num in numbers if num % 2 == 0)\n\ndef perform_concurrent_tasks(function, iterable, max_workers=5):\n    \"\"\"Perform tasks concurrently using concurrent.futures\"\"\"\n    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n        future_to_task = {executor.submit(function, item): item for item in iterable}\n        for future in concurrent.futures.as_completed(future_to_task):\n            yield future.result()\n\ndef main():\n    parser = argparse.ArgumentParser(description='ChainMap, Comprehension, Concurrency Example')\n    parser.add_argument('--dict1', nargs='+', help='Elements of the first dictionary (key=value)')\n    parser.add_argument('--dict2', nargs='+', help='Elements of the second dictionary (key=value)')\n    parser.add_argument('--numbers', nargs='+', type=int, help='A list of numbers')\n    args = parser.parse_args()\n\n    # Convert input to dictionaries\n    dict1 = dict(item.split('=') for item in args.dict1)\n    dict2 = dict(item.split('=') for item in args.dict2)\n\n    # Merge dictionaries using ChainMap\n    merged_dict = merge_dictionaries(dict1, dict2)\n    print(\"Merged dictionary:\", merged_dict.maps)\n\n    # Count even numbers using list comprehension\n    even_count = count_even_numbers(args.numbers)\n    print(\"Count of even numbers:\", even_count)\n\n    # Perform concurrent tasks (example: calculate squares concurrently)\n    squares = list(perform_concurrent_tasks(lambda x: x ** 2, args.numbers))\n    print(\"Squares of numbers:\", squares)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}