{
    "id": "problem_5",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport argparse\nfrom collections import ChainMap\nimport concurrent.futures\n\ndef process_data(data):\n    # Simulate data processing\n    return {k: v * 2 for k, v in data.items()}\n\ndef main(config, default_config):\n    # Combine user config and default config with ChainMap\n    configuration = ChainMap(config, default_config)\n\n    # Display the effective configuration\n    print(\"Effective configuration:\")\n    for key, value in configuration.items():\n        print(f\"{key} = {value}\")\n\n    # Create a list of dictionaries to simulate data processing\n    data_to_process = [{\"value\": i} for i in range(1, 6)]\n\n    # Use concurrency to process data\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        results = list(executor.map(process_data, data_to_process))\n\n    # Display processed data\n    print(\"\\nProcessed data:\")\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    # Default configuration\n    default_config = {'timeout': 5, 'verbose': False}\n\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(description=\"A program demonstrating ChainMap, Comprehension, and Concurrency.\")\n    parser.add_argument('--timeout', type=int, help='Timeout for processing data')\n    parser.add_argument('--verbose', action='store_true', help='Increase output verbosity')\n    args = parser.parse_args()\n\n    # Convert args to dictionary and filter out None values using dictionary comprehension\n    user_config = {key: value for key, value in vars(args).items() if value is not None}\n\n    # Call main function\n    main(user_config, default_config)\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}