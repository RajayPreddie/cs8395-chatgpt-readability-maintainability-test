{
    "id": "problem_4",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef count_byte_occurrences(byte_sequence, byte_value):\n    \"\"\"\n    Count occurrences of a specific byte in a bytes object.\n\n    :param byte_sequence: bytes object to search in\n    :param byte_value: integer value of the byte to search for (0-255)\n    :return: number of occurrences of the byte_value in byte_sequence\n    \"\"\"\n    if not isinstance(byte_sequence, bytes):\n        raise TypeError(\"byte_sequence must be a bytes object\")\n    if not isinstance(byte_value, int) or not (0 <= byte_value <= 255):\n        raise ValueError(\"byte_value must be an integer between 0 and 255\")\n\n    return byte_sequence.count(byte_value)\n\ndef main():\n    # Example usage:\n    # Count how many times the byte value 10 (newline in ASCII) appears in a bytes object\n    sample_bytes = b\"Hello\\nWorld\\nThis\\nIs\\nA\\nTest\\n\"\n    target_byte_value = 10  # Newline byte in ASCII\n\n    occurrences = count_byte_occurrences(sample_bytes, target_byte_value)\n    print(f\"The byte value {target_byte_value} occurs {occurrences} times.\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytes",
        "Easy"
    ],
    "keywords": [
        "bytes"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "default"
}