{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\nimport concurrent.futures\nimport os\nimport argparse\n\ndef generate_chainmap(*dicts):\n    \"\"\"Create a ChainMap with the provided dictionaries.\"\"\"\n    return ChainMap(*dicts)\n\ndef file_info(directory):\n    \"\"\"Generate a dictionary with file names and their sizes from a directory.\"\"\"\n    return {f: os.path.getsize(os.path.join(directory, f)) for f in os.listdir(directory)}\n\ndef concurrent_comprehension(chain_map):\n    \"\"\"Use concurrency to process a comprehension over a ChainMap.\"\"\"\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_file = {executor.submit(os.path.getsize, chain_map.maps[0][file_name]): file_name for file_name in chain_map.maps[0]}\n        return {future_to_file[future]: future.result() for future in concurrent.futures.as_completed(future_to_file)}\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Process some directories.\")\n    parser.add_argument('directories', nargs='+', help='A list of directories to process')\n    args = parser.parse_args()\n\n    # Create a ChainMap of file information dictionaries from the provided directories\n    dicts = [file_info(directory) for directory in args.directories]\n    chain_map = generate_chainmap(*dicts)\n\n    # Process the ChainMap using concurrency\n    file_sizes = concurrent_comprehension(chain_map)\n\n    # Print the results\n    for file_name, file_size in file_sizes.items():\n        print(f\"{file_name}: {file_size} bytes\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "radon"
}