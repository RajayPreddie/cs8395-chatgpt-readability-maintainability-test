{
    "id": "problem_18",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\nclass MinIntHeap:\n    \"\"\"A min-heap for integers.\"\"\"\n    def __init__(self):\n        self.heap = []\n    \n    def push(self, item):\n        \"\"\"Push a new item onto the heap.\"\"\"\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        \"\"\"Pop the smallest item off the heap.\"\"\"\n        return heapq.heappop(self.heap)\n    \n    def peek(self):\n        \"\"\"Peek at the smallest item without popping it.\"\"\"\n        return self.heap[0] if self.heap else None\n    \n    def __len__(self):\n        \"\"\"Get the number of elements in the heap.\"\"\"\n        return len(self.heap)\n\ndef generate_numbers(n):\n    \"\"\"Generate the first n numbers using a generator.\"\"\"\n    for i in range(n):\n        yield i\n\ndef main():\n    heap = MinIntHeap()\n    number_generator = generate_numbers(10)\n    \n    # Push generated numbers onto the heap\n    for number in number_generator:\n        heap.push(number)\n    \n    # Pop numbers from the heap and print them\n    while len(heap) > 0:\n        print(heap.pop())\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "radon"
}