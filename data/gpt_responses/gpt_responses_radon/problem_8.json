{
    "id": "problem_8",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ContextManager.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport contextlib\n\nclass FileManager:\n    \"\"\"Context manager for handling file operations.\"\"\"\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n\n    def __enter__(self):\n        self.file = open(self.filename, self.mode)\n        return self.file\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self.file:\n            self.file.close()\n\ndef read_file_content(filename):\n    \"\"\"Function to read from a file using the context manager.\"\"\"\n    with FileManager(filename, 'r') as file:\n        return file.read()\n\ndef write_file_content(filename, content):\n    \"\"\"Function to write to a file using the context manager.\"\"\"\n    with FileManager(filename, 'w') as file:\n        file.write(content)\n\ndef main():\n    # Example usage of the FileManager context manager\n    content_to_write = \"Hello, World!\"\n    filename = \"example.txt\"\n\n    # Write content to the file\n    write_file_content(filename, content_to_write)\n\n    # Read content from the file\n    content_read = read_file_content(filename)\n    print(content_read)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ContextManager",
        "Easy"
    ],
    "keywords": [
        "ContextManager"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "radon"
}