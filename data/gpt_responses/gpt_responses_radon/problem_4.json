{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef count_byte_occurrences(byte_sequence, target_byte):\n    \"\"\"\n    Count the occurrences of a target byte in a byte sequence.\n\n    :param byte_sequence: bytes, the byte sequence to search\n    :param target_byte: bytes, the target byte to count\n    :return: int, the number of occurrences of the target byte\n    \"\"\"\n    return byte_sequence.count(target_byte)\n\ndef convert_string_to_bytes(string_input):\n    \"\"\"\n    Convert a string to bytes.\n\n    :param string_input: str, the input string to convert\n    :return: bytes, the converted byte sequence\n    \"\"\"\n    return string_input.encode()\n\ndef main():\n    user_input = input(\"Enter a string to analyze: \")\n    byte_sequence = convert_string_to_bytes(user_input)\n    target_input = input(\"Enter the character to count: \")\n    target_byte = convert_string_to_bytes(target_input)\n\n    if len(target_byte) != 1:\n        print(\"Please enter exactly one character.\")\n    else:\n        occurrences = count_byte_occurrences(byte_sequence, target_byte)\n        print(f\"The byte '{target_input}' occurs {occurrences} times in the given string.\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytes",
        "Easy"
    ],
    "keywords": [
        "bytes"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "radon"
}