{
    "id": "problem_14",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Deque,dict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import deque\n\ndef cache_results(func):\n    \"\"\"Decorator to cache function results using a dictionary.\"\"\"\n    cache = dict()\n\n    def wrapper(n):\n        if n not in cache:\n            cache[n] = func(n)\n        return cache[n]\n    \n    return wrapper\n\n@cache_results\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number with memoization.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef sliding_window_maximum(nums, k):\n    \"\"\"Find the maximum value in each sliding window of size k.\"\"\"\n    if not nums or k <= 0:\n        return []\n    if k == 1:\n        return nums\n\n    deq = deque()\n    result = []\n\n    for i, num in enumerate(nums):\n        while deq and deq[0] < i - k + 1:\n            deq.popleft()\n        while deq and nums[deq[-1]] < num:\n            deq.pop()\n        deq.append(i)\n        if i >= k - 1:\n            result.append(nums[deq[0]])\n\n    return result\n\ndef main():\n    # Fibonacci example\n    for i in range(10):\n        print(fibonacci(i))\n    \n    # Sliding window maximum example\n    nums = [1, 3, -1, -3, 5, 3, 6, 7]\n    k = 3\n    print(sliding_window_maximum(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Deque",
        "dict",
        "Medium"
    ],
    "keywords": [
        "Deque",
        "dict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "radon"
}