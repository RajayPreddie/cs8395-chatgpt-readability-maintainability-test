{
    "id": "problem_19",
    "description": "Act as a Python developer and write a Python program with a focus on maintainable and low-complexity code as measured by radon. Here's a example snippet with low cyclomatic complexity:\n\n# Example Snippet for Radon\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main():\n    for i in range(10):\n        print(fibonacci(i))\n\nif __name__ == \"__main__\":\n    main()\n\nStrive for a simple and clear code structure, minimizing cyclomatic complexity. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Global state,heapq,IdiomaticPython.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\nclass GlobalState:\n    \"\"\"Class to manage a global state with a priority queue.\"\"\"\n    def __init__(self):\n        self._priority_queue = []\n\n    def add_task(self, task, priority):\n        \"\"\"Add a task with a given priority to the queue.\"\"\"\n        heapq.heappush(self._priority_queue, (priority, task))\n\n    def get_next_task(self):\n        \"\"\"Pop the task with the highest priority (lowest number).\"\"\"\n        if self._priority_queue:\n            return heapq.heappop(self._priority_queue)[1]\n        return None\n\n    def is_empty(self):\n        \"\"\"Check if the queue is empty.\"\"\"\n        return not self._priority_queue\n\ndef process_tasks(global_state):\n    \"\"\"Process tasks from the global state until there are no more tasks.\"\"\"\n    while not global_state.is_empty():\n        task = global_state.get_next_task()\n        print(f\"Processing task: {task}\")\n\ndef main():\n    # Create a global state instance\n    global_state = GlobalState()\n\n    # Add some tasks to the global state\n    global_state.add_task(\"Write documentation\", priority=2)\n    global_state.add_task(\"Implement feature\", priority=1)\n    global_state.add_task(\"Fix bug\", priority=3)\n\n    # Process all tasks\n    process_tasks(global_state)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "radon"
}