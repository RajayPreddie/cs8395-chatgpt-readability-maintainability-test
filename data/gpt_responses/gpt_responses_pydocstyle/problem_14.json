{
    "id": "problem_14",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Deque,dict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import deque\n\ndef manage_queue(operations):\n    \"\"\"\n    Perform a series of operations on a deque and return the final deque.\n\n    The function takes a list of tuples representing operations and their\n    arguments. Supported operations are 'append', 'appendleft', 'pop', and 'popleft'.\n\n    :param operations: A list of tuples with the operation name and its arguments.\n    :type operations: list of tuple\n    :return: The resulting deque after performing all operations.\n    :rtype: deque\n\n    :Example:\n\n    >>> manage_queue([('append', 5), ('appendleft', 10), ('pop',)])\n    deque([10])\n    \"\"\"\n    q = deque()\n    for operation in operations:\n        if not isinstance(operation, tuple) or not operation:\n            raise ValueError(\"Each operation must be a non-empty tuple.\")\n\n        op_name, *args = operation\n        if op_name not in ('append', 'appendleft', 'pop', 'popleft'):\n            raise ValueError(f\"Unsupported operation: {op_name}.\")\n\n        getattr(q, op_name)(*args)\n    \n    return q\n\ndef create_frequency_dict(iterable):\n    \"\"\"\n    Create a dictionary representing the frequency of each element in the iterable.\n\n    :param iterable: An iterable of hashable elements to count.\n    :type iterable: iterable\n    :return: A dictionary with elements as keys and their frequencies as values.\n    :rtype: dict\n\n    :Example:\n\n    >>> create_frequency_dict(['apple', 'banana', 'apple', 'orange', 'banana', 'apple'])\n    {'apple': 3, 'banana': 2, 'orange': 1}\n    \"\"\"\n    frequency = dict()\n    for item in iterable:\n        frequency[item] = frequency.get(item, 0) + 1\n    return frequency\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Queue management example\n    operations = [\n        ('append', 1),\n        ('append', 2),\n        ('appendleft', 3),\n        ('pop',),\n        ('popleft',)\n    ]\n    final_queue = manage_queue(operations)\n    print(final_queue)\n\n    # Frequency dictionary example\n    fruits = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n    fruit_frequency = create_frequency_dict(fruits)\n    print(fruit_frequency)\n",
    "tags": [
        "Deque",
        "dict",
        "Medium"
    ],
    "keywords": [
        "Deque",
        "dict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}