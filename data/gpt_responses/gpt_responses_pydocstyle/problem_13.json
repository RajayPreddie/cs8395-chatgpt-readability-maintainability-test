{
    "id": "problem_13",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DependencyInjection,Deque.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import deque\nfrom typing import Any, Callable\n\nclass DependencyInjector:\n    \"\"\"A simple dependency injection container.\n\n    This class is responsible for providing dependencies to different parts of the application.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the container with an empty dictionary for services.\"\"\"\n        self._services = {}\n\n    def add_service(self, name: str, service: Any):\n        \"\"\"Add a service to the container.\n\n        :param name: The name of the service.\n        :param service: The service instance or provider.\n        \"\"\"\n        self._services[name] = service\n\n    def get_service(self, name: str) -> Any:\n        \"\"\"Retrieve a service from the container.\n\n        :param name: The name of the service to retrieve.\n        :return: The service instance.\n        :raises KeyError: If the service is not found in the container.\n        \"\"\"\n        if name not in self._services:\n            raise KeyError(f\"Service {name} not found\")\n        return self._services[name]\n\n\nclass TaskQueue:\n    \"\"\"A queue system to manage tasks using a double-ended queue (deque).\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the task queue with an empty deque.\"\"\"\n        self._tasks = deque()\n\n    def add_task(self, task: Callable):\n        \"\"\"Add a task to the queue.\n\n        :param task: The task (function) to add to the queue.\n        \"\"\"\n        self._tasks.append(task)\n\n    def run(self):\n        \"\"\"Run and clear all tasks in the queue.\"\"\"\n        while self._tasks:\n            task = self._tasks.popleft()\n            task()\n\n\n# Example usage:\n\n# Initialize Dependency Injector\ndi = DependencyInjector()\n\n# Add a simple logger service\ndi.add_service('logger', lambda message: print(f\"LOG: {message}\"))\n\n# Retrieve the logger service\nlogger = di.get_service('logger')\n\n# Log a message\nlogger(\"Dependency Injection container initialized.\")\n\n# Initialize TaskQueue\ntask_queue = TaskQueue()\n\n# Add a couple of tasks\ntask_queue.add_task(lambda: logger(\"Task 1 executed.\"))\ntask_queue.add_task(lambda: logger(\"Task 2 executed.\"))\n\n# Run the task queue\ntask_queue.run()\n",
    "tags": [
        "DependencyInjection",
        "Deque",
        "Medium"
    ],
    "keywords": [
        "DependencyInjection",
        "Deque"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}