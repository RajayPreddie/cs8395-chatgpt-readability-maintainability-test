{
    "id": "problem_10",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Counter.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import Counter\n\ndef count_elements(sequence):\n    \"\"\"Count the occurrences of each element in the sequence.\n\n    Given an iterable sequence, this function counts how often each element\n    appears in the sequence and returns a dictionary with these counts.\n\n    :param sequence: An iterable sequence of elements to count.\n    :type sequence: iterable\n    :return: A dictionary with elements as keys and their counts as values.\n    :rtype: dict\n\n    :Example:\n\n    >>> count_elements(['apple', 'banana', 'apple', 'orange', 'banana', 'apple'])\n    {'apple': 3, 'banana': 2, 'orange': 1}\n    \"\"\"\n    return Counter(sequence)\n\nif __name__ == \"__main__\":\n    import sys\n\n    # Example usage: python program.py apple banana apple orange banana apple\n    if len(sys.argv) > 1:\n        elements = sys.argv[1:]\n        counts = count_elements(elements)\n        print(counts)\n    else:\n        print(\"Usage: python program.py element1 element2 element3 ...\")\n",
    "tags": [
        "Counter",
        "Easy"
    ],
    "keywords": [
        "Counter"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}