{
    "id": "problem_2",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: asyncio.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nasync def fetch_data():\n    \"\"\"Simulate fetching data from a remote source with a delay.\n\n    This function simulates an asynchronous request to a remote data source\n    by waiting for a certain amount of time.\n\n    :return: A dictionary representing the fetched data.\n    \"\"\"\n    print(\"Start fetching...\")\n    await asyncio.sleep(2)\n    print(\"Data fetched.\")\n    return {\"data\": \"Sample data\"}\n\nasync def process_data(data):\n    \"\"\"Process the data and return the result.\n\n    This function simulates processing the fetched data.\n\n    :param data: The data to process.\n    :return: A string representing the processed result.\n    \"\"\"\n    print(\"Processing data...\")\n    await asyncio.sleep(1)\n    return f\"Processed data: {data['data']}\"\n\nasync def main():\n    \"\"\"Fetch and process data asynchronously.\n\n    This is the main entry point for running the asynchronous tasks.\n    It fetches the data and then processes it.\n    \"\"\"\n    fetched_data = await fetch_data()\n    processed_result = await process_data(fetched_data)\n    print(processed_result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}