{
    "id": "problem_2",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: asyncio.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nasync def fetch_data():\n    \"\"\"Simulate fetching data asynchronously.\n\n    This function simulates an asynchronous operation, such as fetching data\n    from a remote source. It uses asyncio.sleep to simulate a delay.\n\n    :return: A string representing the fetched data.\n    \"\"\"\n    print(\"Start fetching...\")\n    await asyncio.sleep(2)  # Simulate a delay of 2 seconds\n    print(\"Data fetched successfully.\")\n    return \"Sample Data\"\n\nasync def main():\n    \"\"\"Run the main event loop.\n\n    This function serves as the entry point for the asyncio event loop. It\n    awaits the fetch_data coroutine.\n    \"\"\"\n    data = await fetch_data()\n    print(f\"Received data: {data}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}