{
    "id": "problem_2",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: asyncio.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nasync def fetch_data():\n    \"\"\"Simulate fetching data from a remote source asynchronously.\n\n    This is an example function that simulates an asynchronous operation,\n    such as fetching data from a remote API. It uses asyncio to simulate\n    a delay.\n\n    :return: A string representing the fetched data.\n    \"\"\"\n    print(\"Start fetching...\")\n    await asyncio.sleep(2)  # Simulate a network delay\n    print(\"Data fetched.\")\n    return \"Sample data\"\n\nasync def main():\n    \"\"\"Main function to execute asynchronous tasks.\n\n    This function serves as the entry point to run asynchronous functions.\n    It awaits the completion of the fetch_data function and then\n    prints the result.\n    \"\"\"\n    data = await fetch_data()\n    print(data)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}