{
    "id": "problem_6",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"\nA module for demonstrating pydocstyle adherence with list comprehension and concurrency.\n\nThis module provides an example of how to write a Python program that uses list comprehension\nand concurrency, with docstrings that conform to the pydocstyle standards.\n\"\"\"\n\nimport concurrent.futures\n\n\ndef square_numbers(numbers):\n    \"\"\"Square each number in a given list using list comprehension.\n\n    This function demonstrates the use of list comprehension by returning a list where each\n    element is the square of the corresponding element from the input list.\n\n    :param numbers: A list of numbers to square.\n    :return: A list containing the squares of the input numbers.\n    \"\"\"\n    return [number ** 2 for number in numbers]\n\n\ndef concurrent_square_numbers(numbers):\n    \"\"\"Square numbers concurrently and return the results as a list.\n\n    This function demonstrates the use of concurrency by using a ThreadPoolExecutor to square\n    each number in the input list concurrently.\n\n    :param numbers: A list of numbers to square.\n    :return: A list containing the squares of the input numbers.\n    \"\"\"\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        # Map the `square_number` function over the numbers concurrently\n        results = executor.map(square_number, numbers)\n    return list(results)\n\n\ndef square_number(number):\n    \"\"\"Return the square of a given number.\n\n    This helper function is used by the concurrent_square_numbers function to square a single\n    number. It is intended to be called concurrently.\n\n    :param number: The number to square.\n    :return: The square of the number.\n    \"\"\"\n    return number ** 2\n\n\n# Example usage\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(\"Squaring numbers using list comprehension:\")\n    print(square_numbers(nums))\n\n    print(\"\\nSquaring numbers concurrently:\")\n    print(concurrent_square_numbers(nums))\n",
    "tags": [
        "Comprehension",
        "Concurrency",
        "Medium"
    ],
    "keywords": [
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}