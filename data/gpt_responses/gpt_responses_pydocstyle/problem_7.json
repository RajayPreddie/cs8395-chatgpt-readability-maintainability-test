{
    "id": "problem_7",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Concurrency,ContextManager.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating pydocstyle adherence with concurrency and context manager.\n\nThis module provides examples of how to write docstrings that conform to the pydocstyle\nstandards while solving a problem that involves concurrency and the use of a context manager.\n\"\"\"\n\nfrom threading import Thread\nfrom contextlib import contextmanager\nimport time\n\n\n@contextmanager\ndef timer_context_manager(task_name):\n    \"\"\"Provide a context manager to measure the execution time of a block of code.\n\n    :param task_name: The name of the task for which the execution time is measured.\n    :yield: None\n    \"\"\"\n    start_time = time.time()\n    yield\n    end_time = time.time()\n    print(f\"Task {task_name} completed in {end_time - start_time:.2f} seconds.\")\n\n\ndef long_running_task(duration):\n    \"\"\"Simulate a long-running task by sleeping for a given duration.\n\n    :param duration: The duration in seconds for which the task should run.\n    \"\"\"\n    print(f\"Task started, will take {duration} seconds to complete.\")\n    time.sleep(duration)\n    print(\"Task finished.\")\n\n\ndef main():\n    \"\"\"Run two long-running tasks concurrently and measure their execution time.\"\"\"\n    durations = [2, 3]  # Durations for the two tasks\n    threads = []\n\n    for i, duration in enumerate(durations, start=1):\n        thread = Thread(target=long_running_task, args=(duration,))\n        threads.append(thread)\n\n    with timer_context_manager(\"All tasks\"):\n        # Start all threads\n        for thread in threads:\n            thread.start()\n\n        # Wait for all threads to complete\n        for thread in threads:\n            thread.join()\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Concurrency",
        "ContextManager",
        "Medium"
    ],
    "keywords": [
        "Concurrency",
        "ContextManager"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}