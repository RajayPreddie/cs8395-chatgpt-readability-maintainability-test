{
    "id": "problem_7",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport concurrent.futures\n\ndef calculate_power(base, exponent):\n    \"\"\"Calculate the power of a base raised to an exponent.\n\n    This function performs an exponentiation operation for the given base and exponent.\n\n    :param base: The base number.\n    :param exponent: The exponent number.\n    :return: The result of raising base to the power of exponent.\n    \"\"\"\n    return base ** exponent\n\ndef main():\n    \"\"\"Main function to demonstrate concurrency with power calculations.\n\n    This function uses a thread pool to concurrently calculate powers of numbers.\n    \"\"\"\n    # List of tuples containing base and exponent\n    tasks = [(2, 5), (3, 4), (4, 3), (5, 2), (6, 2)]\n\n    # Use a thread pool to calculate powers concurrently\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        futures = [executor.submit(calculate_power, base, exponent) for base, exponent in tasks]\n        for future in concurrent.futures.as_completed(futures):\n            print(f'Result: {future.result()}')\n\nif __name__ == '__main__':\n    main()\n",
    "tags": [
        "Concurrency",
        "Easy"
    ],
    "keywords": [
        "Concurrency"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}