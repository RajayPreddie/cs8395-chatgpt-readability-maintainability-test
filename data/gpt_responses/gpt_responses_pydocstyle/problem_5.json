{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\nimport concurrent.futures\nimport itertools\n\ndef merge_dictionaries(dict_list):\n    \"\"\"Merge multiple dictionaries into a single dictionary.\n\n    This function uses ChainMap to combine multiple dictionaries into a single\n    view that presents all dictionaries as one. The first dictionary in the list\n    has precedence.\n\n    :param dict_list: A list of dictionaries to merge.\n    :return: A ChainMap object representing the merged dictionaries.\n    \"\"\"\n    return ChainMap(*dict_list)\n\ndef square_numbers(numbers):\n    \"\"\"Calculate the square of each number in a list.\n\n    This function uses a comprehension to create a list of squares.\n\n    :param numbers: An iterable of numbers to square.\n    :return: A list of squared numbers.\n    \"\"\"\n    return [number ** 2 for number in numbers]\n\ndef concurrent_sum(numbers):\n    \"\"\"Calculate the sum of a list of numbers using concurrency.\n\n    This function uses a concurrent.futures.ThreadPoolExecutor to calculate\n    the sum of a list of numbers in parallel.\n\n    :param numbers: An iterable of numbers to sum.\n    :return: The sum of the numbers.\n    \"\"\"\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        # Split the work into chunks that can be processed in parallel\n        futures = [executor.submit(sum, chunk) for chunk in chunks(numbers, 10)]\n        return sum(future.result() for future in concurrent.futures.as_completed(futures))\n\ndef chunks(iterable, size):\n    \"\"\"Yield successive n-sized chunks from an iterable.\n\n    This function uses itertools to create chunks from an iterable.\n\n    :param iterable: An iterable to chunk.\n    :param size: The size of each chunk.\n    :return: An iterator that yields chunks of the given size.\n    \"\"\"\n    it = iter(iterable)\n    for first in it:\n        yield itertools.chain([first], itertools.islice(it, size - 1))\n\nif __name__ == \"__main__\":\n    # Example usage of the functions\n\n    # Merging dictionaries\n    dict1 = {'a': 1, 'b': 2}\n    dict2 = {'b': 3, 'c': 4}\n    merged_dict = merge_dictionaries([dict1, dict2])\n    print(merged_dict)\n\n    # Squaring numbers\n    numbers = [1, 2, 3, 4, 5]\n    squares = square_numbers(numbers)\n    print(squares)\n\n    # Concurrent sum\n    large_numbers = list(range(1000))\n    total_sum = concurrent_sum(large_numbers)\n    print(total_sum)\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}