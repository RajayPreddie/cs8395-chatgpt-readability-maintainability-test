{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\n\ndef merge_dictionaries(dict1, dict2):\n    \"\"\"Merge two dictionaries using ChainMap and return the result.\n\n    This function takes two dictionaries and merges them into a single dictionary\n    using ChainMap, which creates a new dictionary that groups multiple dictionaries\n    together to create a single view. The dictionaries are merged with the values\n    from the first dictionary taking precedence over the values from the second.\n\n    :param dict1: The first dictionary to merge.\n    :param dict2: The second dictionary to merge.\n    :return: A ChainMap object representing the merged dictionaries.\n    \"\"\"\n    return ChainMap(dict1, dict2)\n\ndef main():\n    \"\"\"Run the main function of the module.\n\n    This function serves as the entry point for the module. It creates two\n    dictionaries, merges them using the merge_dictionaries function, and prints\n    the resulting ChainMap object to the console.\n    \"\"\"\n    dict1 = {'a': 1, 'b': 2}\n    dict2 = {'b': 3, 'c': 4}\n    \n    merged_dict = merge_dictionaries(dict1, dict2)\n    \n    print(\"Merged Dictionary:\", merged_dict)\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "ChainMap",
        "Easy"
    ],
    "keywords": [
        "ChainMap"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}