{
    "id": "problem_5",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ChainMap,Comprehension,Concurrency.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\nimport concurrent.futures\n\ndef merge_dictionaries(*dicts):\n    \"\"\"Merge multiple dictionaries into a single dictionary.\n\n    This function uses ChainMap to combine dictionaries, giving precedence\n    to the values from the left-most dictionary.\n\n    :param dicts: An arbitrary number of dictionary arguments to merge.\n    :return: A merged dictionary with combined key-value pairs.\n    \"\"\"\n    return dict(ChainMap(*dicts))\n\ndef square_numbers(numbers):\n    \"\"\"Calculate the square of each number in a list.\n\n    Utilizes a list comprehension for concise and efficient calculation.\n\n    :param numbers: A list of numbers to be squared.\n    :return: A list containing the squares of the given numbers.\n    \"\"\"\n    return [number ** 2 for number in numbers]\n\ndef concurrent_fetch(urls, fetch_function):\n    \"\"\"Fetch data from a list of URLs concurrently.\n\n    This function uses concurrent.futures to perform multiple fetch\n    operations in parallel.\n\n    :param urls: A list of URLs from which to fetch data.\n    :param fetch_function: The function used to fetch data from a given URL.\n    :return: A list of results from the fetch operations.\n    \"\"\"\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_url = {executor.submit(fetch_function, url): url for url in urls}\n        results = []\n        for future in concurrent.futures.as_completed(future_to_url):\n            results.append(future.result())\n        return results\n\n# Example usage:\n\n# Merge dictionaries example\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\nmerged_dict = merge_dictionaries(dict1, dict2)\n\n# Square numbers example\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = square_numbers(numbers)\n\n# Concurrent fetch example\n# Define a simple fetch function for demonstration purposes\ndef fake_fetch(url):\n    return f\"Fetched data from {url}\"\n\nurls_to_fetch = ['http://example.com', 'http://example.org']\nfetched_data = concurrent_fetch(urls_to_fetch, fake_fetch)\n\n# The variables `merged_dict`, `squared_numbers`, and `fetched_data` can be used\n# further in the code or printed to see the results.\n",
    "tags": [
        "ChainMap",
        "Comprehension",
        "Concurrency",
        "Hard"
    ],
    "keywords": [
        "ChainMap",
        "Comprehension",
        "Concurrency"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}