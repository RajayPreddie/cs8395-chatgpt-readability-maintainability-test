{
    "id": "problem_8",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: ContextManager.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nclass ContextManager:\n    \"\"\"Provide a context manager to handle a resource.\n\n    This context manager is designed to demonstrate the use of the 'with' statement\n    in Python, ensuring that resources are properly managed with automatic setup and\n    teardown of the resource.\n\n    Attributes:\n        resource: A placeholder for the resource that needs to be managed.\n    \"\"\"\n\n    def __init__(self, resource):\n        \"\"\"Initialize the context manager with the given resource.\n\n        :param resource: The resource that this context manager will handle.\n        \"\"\"\n        self.resource = resource\n        self.is_open = False\n\n    def __enter__(self):\n        \"\"\"Enter the runtime context and setup the resource.\n\n        :return: The managed resource ready for use.\n        \"\"\"\n        self.is_open = True\n        print(f\"Opening resource: {self.resource}\")\n        # Perform any setup required here\n        return self.resource\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Exit the runtime context and teardown the resource.\n\n        :param exc_type: Exception type if raised in the context.\n        :param exc_val: Exception value if raised.\n        :param exc_tb: Exception traceback if raised.\n        \"\"\"\n        self.is_open = False\n        print(f\"Closing resource: {self.resource}\")\n        # Perform any cleanup required here\n        if exc_type:\n            print(f\"An exception occurred: {exc_val}\")\n            return False  # Propagate the exception\n        return True\n\n\nif __name__ == \"__main__\":\n    # Example usage of the context manager\n    with ContextManager(\"SampleResource\") as resource:\n        print(f\"Using {resource}\")\n        # Perform some operations with the resource\n        # For example, let's just raise an exception to see the handling\n        raise ValueError(\"Just a test exception\")\n",
    "tags": [
        "ContextManager",
        "Easy"
    ],
    "keywords": [
        "ContextManager"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}