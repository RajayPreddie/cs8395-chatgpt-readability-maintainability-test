{
    "id": "problem_1",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: list.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating pydocstyle adherence with list operations.\n\nThis module provides a function to calculate the sum of all elements in a list\nadhering to the pydocstyle standards for docstrings.\n\"\"\"\n\n\ndef sum_of_list(numbers_list):\n    \"\"\"Calculate the sum of all numbers in a list and return the result.\n\n    This function takes a list of numbers and returns the sum of these numbers.\n    If the list is empty, the function returns 0.\n\n    :param numbers_list: List of numbers to be summed.\n    :type numbers_list: list\n    :return: The sum of all the numbers in the list.\n    :rtype: float or int\n    \"\"\"\n    return sum(numbers_list)\n\n\nif __name__ == \"__main__\":\n    # Example usage:\n    example_list = [1, 2, 3, 4, 5]\n    print(\"The sum of the list is:\", sum_of_list(example_list))\n",
    "tags": [
        "list",
        "Easy"
    ],
    "keywords": [
        "list"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}