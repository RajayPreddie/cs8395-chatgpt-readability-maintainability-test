{
    "id": "problem_1",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: list.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef find_median(sorted_list):\n    \"\"\"Find the median value in a sorted list of numbers.\n\n    The function assumes that the list is sorted in ascending order. If the list\n    has an odd number of elements, the median is the middle element. If the list\n    has an even number of elements, the median is the average of the two middle\n    elements.\n\n    :param sorted_list: A list of numbers sorted in ascending order.\n    :type sorted_list: list\n    :return: The median value.\n    :rtype: float or int\n    \"\"\"\n    list_length = len(sorted_list)\n    middle_index = list_length // 2\n\n    if list_length % 2 == 0:\n        return (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        return sorted_list[middle_index]\n\ndef main():\n    \"\"\"Run the main function to demonstrate finding the median in a list.\"\"\"\n    sample_list = [2, 3, 5, 8, 9]\n    median_value = find_median(sample_list)\n    print(f\"The median of the list is: {median_value}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "list",
        "Easy"
    ],
    "keywords": [
        "list"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}