{
    "id": "problem_19",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Global state,heapq,IdiomaticPython.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\nclass GlobalState:\n    \"\"\"Class to manage a global state with a priority queue.\n\n    The GlobalState class uses a heapq to manage a set of items where each\n    item has a priority associated with it.\n\n    Attributes:\n        _queue (list): A list structure to hold items in a heap.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the global state with an empty priority queue.\"\"\"\n        self._queue = []\n\n    def add_item(self, item, priority):\n        \"\"\"Add an item with a given priority to the global state.\n\n        :param item: The item to be added to the queue.\n        :param priority: The priority associated with the item.\n        \"\"\"\n        heapq.heappush(self._queue, (priority, item))\n\n    def get_item(self):\n        \"\"\"Remove and return the highest priority item from the global state.\n\n        :return: The item with the highest priority.\n        \"\"\"\n        if self._queue:\n            return heapq.heappop(self._queue)[1]\n        else:\n            return None\n\n    def __str__(self):\n        \"\"\"Return a formatted string representation of the queue.\n\n        :return: A string representation of the items in the queue.\n        \"\"\"\n        return 'GlobalState(' + ', '.join([str(item) for _, item in self._queue]) + ')'\n\n\ndef main():\n    \"\"\"Run an example of using the GlobalState class.\"\"\"\n    global_state = GlobalState()\n    global_state.add_item('low_priority_task', priority=10)\n    global_state.add_item('high_priority_task', priority=1)\n    global_state.add_item('medium_priority_task', priority=5)\n\n    print(\"The highest priority item is:\", global_state.get_item())\n    print(\"The remaining queue:\", global_state)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Global state",
        "heapq",
        "IdiomaticPython",
        "Hard"
    ],
    "keywords": [
        "Global state",
        "heapq",
        "IdiomaticPython"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}