{
    "id": "problem_20",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: heapq,IdiomaticPython,Introspection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\ndef merge_sorted_arrays(sorted_arrays):\n    \"\"\"Merge multiple sorted arrays into a single sorted array.\n    \n    Uses a heapq to efficiently merge the arrays by pushing and popping\n    the smallest items from each array in a priority queue fashion.\n    \n    :param sorted_arrays: A list of sorted arrays to be merged.\n    :return: A single sorted array containing all elements from the input arrays.\n    \n    :raises TypeError: If sorted_arrays is not a list of lists.\n    \"\"\"\n    if not all(isinstance(arr, list) for arr in sorted_arrays):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    merged_array = []\n    min_heap = []\n\n    # Initialize the heap with the first element of each array\n    for i, sorted_array in enumerate(sorted_arrays):\n        if sorted_array:\n            heapq.heappush(min_heap, (sorted_array[0], i, 0))\n\n    # Extract the smallest elements and add the next element from that array to the heap\n    while min_heap:\n        val, array_idx, element_idx = heapq.heappop(min_heap)\n        merged_array.append(val)\n        \n        next_element_idx = element_idx + 1\n        if next_element_idx < len(sorted_arrays[array_idx]):\n            next_val = sorted_arrays[array_idx][next_element_idx]\n            heapq.heappush(min_heap, (next_val, array_idx, next_element_idx))\n\n    return merged_array\n\ndef introspect_function(function):\n    \"\"\"Prints the name and docstring of a given function.\n    \n    :param function: A function object to introspect.\n    \"\"\"\n    print(f\"Function name: {function.__name__}\")\n    print(f\"Docstring:\\n{function.__doc__}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    arrays = [[1, 4, 5], [1, 3, 4], [2, 6]]\n    print(\"Merged array:\", merge_sorted_arrays(arrays))\n    introspect_function(merge_sorted_arrays)\n",
    "tags": [
        "heapq",
        "IdiomaticPython",
        "Introspection",
        "Hard"
    ],
    "keywords": [
        "heapq",
        "IdiomaticPython",
        "Introspection"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}