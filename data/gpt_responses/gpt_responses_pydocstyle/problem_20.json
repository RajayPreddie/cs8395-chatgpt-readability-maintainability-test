{
    "id": "problem_20",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: heapq,IdiomaticPython,Introspection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\ndef get_largest_elements(sequence, n):\n    \"\"\"\n    Return the n largest elements from the provided sequence using a min-heap.\n\n    This function demonstrates idiomatic Python usage of the heapq module,\n    introspection, and adherence to the pydocstyle standard for docstrings.\n\n    :param sequence: An iterable sequence (e.g., list, tuple) of comparable elements.\n    :param n: The number of largest elements to retrieve from the sequence.\n    :return: A list of the n largest elements from the sequence, in descending order.\n    :raises ValueError: If n is greater than the length of the sequence.\n    \"\"\"\n    if n > len(sequence):\n        raise ValueError(\"n cannot be greater than the length of the sequence\")\n\n    # Use heapq to find the n largest elements\n    largest_elements = heapq.nlargest(n, sequence)\n\n    return largest_elements\n\ndef introspect_function(function):\n    \"\"\"\n    Print the name and docstring of the provided function using introspection.\n\n    :param function: The function to introspect.\n    \"\"\"\n    print(f\"Function name: {function.__name__}\")\n    print(f\"Docstring:\\n{function.__doc__}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    elements = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n    number_of_elements = 3\n\n    try:\n        largest_elements = get_largest_elements(elements, number_of_elements)\n        print(f\"The {number_of_elements} largest elements are: {largest_elements}\")\n    except ValueError as e:\n        print(e)\n\n    # Introspect the 'get_largest_elements' function\n    introspect_function(get_largest_elements)\n",
    "tags": [
        "heapq",
        "IdiomaticPython",
        "Introspection",
        "Hard"
    ],
    "keywords": [
        "heapq",
        "IdiomaticPython",
        "Introspection"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}