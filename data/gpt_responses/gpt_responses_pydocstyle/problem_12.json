{
    "id": "problem_12",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DefaultDict,DependencyInjection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom typing import Callable, DefaultDict, TypeVar, Generic\n\nT = TypeVar('T')\nU = TypeVar('U')\n\nclass Injector(Generic[T, U]):\n    \"\"\"A simple dependency injection container.\n\n    This class provides a mechanism to inject dependencies into client code.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the injector with an empty registry.\"\"\"\n        self._registry: DefaultDict[T, Callable[[], U]] = defaultdict(lambda: lambda: None)\n\n    def register(self, dependency: T, factory: Callable[[], U]):\n        \"\"\"Register a dependency with its factory function.\n\n        :param dependency: The key used to identify the dependency.\n        :param factory: The factory function that creates the dependency instance.\n        \"\"\"\n        self._registry[dependency] = factory\n\n    def resolve(self, dependency: T) -> U:\n        \"\"\"Resolve a dependency to its instance.\n\n        :param dependency: The key used to identify the dependency.\n        :return: The instance of the dependency.\n        \"\"\"\n        return self._registry[dependency]()\n\ndef main():\n    \"\"\"Run the main function demonstrating DependencyInjection with DefaultDict.\"\"\"\n    injector = Injector[str, int]()\n    \n    # Example: Register a dependency for a constant value\n    injector.register('magic_number', lambda: 42)\n\n    # Resolve the dependency and print the result\n    magic_number = injector.resolve('magic_number')\n    print(f\"The magic number is {magic_number}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "DefaultDict",
        "DependencyInjection",
        "Medium"
    ],
    "keywords": [
        "DefaultDict",
        "DependencyInjection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}