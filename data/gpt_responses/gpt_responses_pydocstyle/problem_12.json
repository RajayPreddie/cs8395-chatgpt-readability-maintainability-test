{
    "id": "problem_12",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: DefaultDict,DependencyInjection.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom typing import Callable, DefaultDict, TypeVar, Generic\n\nT = TypeVar('T')\nU = TypeVar('U')\n\nclass DependencyInjector(Generic[T, U]):\n    \"\"\"A simple dependency injector to manage dependencies.\n\n    This class uses a defaultdict to store dependencies, which can be\n    retrieved or injected when required.\n\n    Attributes:\n        dependencies: A default dictionary to store the dependencies.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the DependencyInjector with a defaultdict.\"\"\"\n        self.dependencies: DefaultDict[T, Callable[[], U]] = defaultdict(lambda: None)\n\n    def add_dependency(self, dependency_id: T, creator: Callable[[], U]):\n        \"\"\"Add a new dependency.\n\n        :param dependency_id: The identifier for the dependency.\n        :param creator: A callable that when called creates an instance of the dependency.\n        \"\"\"\n        self.dependencies[dependency_id] = creator\n\n    def get_dependency(self, dependency_id: T) -> U:\n        \"\"\"Get an instance of the requested dependency.\n\n        :param dependency_id: The identifier for the dependency.\n        :return: An instance of the dependency.\n        \"\"\"\n        creator = self.dependencies[dependency_id]\n        if not creator:\n            raise ValueError(f\"Dependency with id {dependency_id} not found.\")\n        return creator()\n\n# Example usage of DependencyInjector.\n\nif __name__ == \"__main__\":\n    # A simple example dependency\n    class ExampleService:\n        \"\"\"Example service class to demonstrate dependency injection.\"\"\"\n\n        def perform_action(self):\n            \"\"\"Perform an action and return a message.\"\"\"\n            return \"Action performed by ExampleService\"\n\n    # Create an instance of the DependencyInjector\n    injector = DependencyInjector()\n\n    # Add the ExampleService dependency\n    injector.add_dependency('example_service', ExampleService)\n\n    # Retrieve the ExampleService dependency and use it\n    service = injector.get_dependency('example_service')\n    print(service.perform_action())\n",
    "tags": [
        "DefaultDict",
        "DependencyInjection",
        "Medium"
    ],
    "keywords": [
        "DefaultDict",
        "DependencyInjection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}