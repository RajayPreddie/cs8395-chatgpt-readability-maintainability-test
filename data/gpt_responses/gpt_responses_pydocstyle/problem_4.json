{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes,ChainMap,Comprehension.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import ChainMap\n\n\ndef bytes_to_human_readable(num_bytes):\n    \"\"\"\n    Convert a number of bytes into a human-readable string with units.\n\n    The function uses a simple algorithm to convert bytes to a human-readable format,\n    using the highest possible unit that allows a value greater than or equal to one.\n\n    :param num_bytes: The number of bytes to convert.\n    :type num_bytes: int\n    :return: A string representing the number of bytes in a more readable format.\n    :rtype: str\n    \"\"\"\n    units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB']\n    for unit in units:\n        if num_bytes < 1024:\n            return f\"{num_bytes:.2f} {unit}\"\n        num_bytes /= 1024\n    return f\"{num_bytes:.2f} {unit}\"\n\n\ndef merge_dictionaries(*dict_args):\n    \"\"\"\n    Merge multiple dictionaries into a single dictionary using ChainMap.\n\n    This function takes any number of dictionaries and merges them into a single dictionary.\n    If there are duplicate keys, the value from the first dictionary in the list is used.\n\n    :param dict_args: An arbitrary number of dictionaries to merge.\n    :return: A merged dictionary with all key-value pairs.\n    :rtype: dict\n    \"\"\"\n    chain = ChainMap(*dict_args)\n    return dict(chain)\n\n\ndef list_comprehension_example(iterable):\n    \"\"\"\n    Provide an example of using list comprehension to create a list from an iterable.\n\n    This function takes an iterable and returns a new list with each element squared.\n\n    :param iterable: An iterable with elements to be squared.\n    :type iterable: iterable\n    :return: A list with each input element squared.\n    :rtype: list\n    \"\"\"\n    return [x**2 for x in iterable]\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Convert bytes to human-readable format\n    print(bytes_to_human_readable(15728640))  # Example output: '15.00 MB'\n\n    # Merge dictionaries using ChainMap\n    dict1 = {'a': 1, 'b': 2}\n    dict2 = {'b': 3, 'c': 4}\n    print(merge_dictionaries(dict1, dict2))  # Example output: {'a': 1, 'b': 2, 'c': 4}\n\n    # List comprehension example\n    print(list_comprehension_example(range(5)))  # Example output: [0, 1, 4, 9, 16]\n",
    "tags": [
        "bytes",
        "ChainMap",
        "Comprehension",
        "Hard"
    ],
    "keywords": [
        "bytes",
        "ChainMap",
        "Comprehension"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}