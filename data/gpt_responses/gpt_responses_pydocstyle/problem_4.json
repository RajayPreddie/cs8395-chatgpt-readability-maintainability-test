{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef convert_string_to_bytes(input_string):\n    \"\"\"Convert a string to bytes using UTF-8 encoding.\n\n    This function takes a string as input and converts it to a bytes object\n    using UTF-8 encoding. If the input is not a string, it raises a TypeError.\n\n    :param input_string: The string to be converted to bytes.\n    :type input_string: str\n    :return: The input string as a bytes object.\n    :rtype: bytes\n    :raises TypeError: If input_string is not of type str.\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise TypeError(\"input_string must be a string\")\n\n    return input_string.encode('utf-8')\n\n\ndef calculate_byte_size(byte_data):\n    \"\"\"Calculate the size of bytes data.\n\n    This function takes a bytes object as input and returns its size in bytes.\n\n    :param byte_data: The bytes object whose size is to be calculated.\n    :type byte_data: bytes\n    :return: The size of the bytes object in bytes.\n    :rtype: int\n    \"\"\"\n    return len(byte_data)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        input_str = \"Hello, World!\"\n        byte_data = convert_string_to_bytes(input_str)\n        print(f\"String: {input_str}\")\n        print(f\"Bytes: {byte_data}\")\n        print(f\"Size of byte data: {calculate_byte_size(byte_data)} bytes\")\n    except TypeError as e:\n        print(e)\n",
    "tags": [
        "bytes",
        "Easy"
    ],
    "keywords": [
        "bytes"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}