{
    "id": "problem_4",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytes,ChainMap,Comprehension.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating pydocstyle adherence with bytes, ChainMap, and Comprehension.\n\nThis module provides a function that merges two dictionaries using ChainMap,\ncounts the bytes in a given string, and uses list comprehension to filter out\nnon-unique elements in a list.\n\"\"\"\n\nfrom collections import ChainMap\n\n\ndef merge_dictionaries(dict1, dict2):\n    \"\"\"Merge two dictionaries using ChainMap and return the result.\n\n    This function takes two dictionaries and merges them into a single mapping.\n    In case of key collisions, values from the first dictionary are preferred.\n\n    :param dict1: The first dictionary to merge.\n    :param dict2: The second dictionary to merge.\n    :return: A ChainMap object representing the merged dictionaries.\n    \"\"\"\n    return ChainMap(dict1, dict2)\n\n\ndef count_bytes_in_string(input_string):\n    \"\"\"Count the number of bytes in a given string.\n\n    This function converts a string into bytes and returns the count of bytes.\n\n    :param input_string: The string to be converted into bytes.\n    :return: The count of bytes in the input string.\n    \"\"\"\n    return len(input_string.encode('utf-8'))\n\n\ndef filter_non_unique_elements(input_list):\n    \"\"\"Filter out non-unique elements using list comprehension.\n\n    This function returns a new list containing only the unique elements\n    from the input list.\n\n    :param input_list: The list from which to filter out non-unique elements.\n    :return: A list containing only unique elements from the input list.\n    \"\"\"\n    return [item for item in set(input_list) if input_list.count(item) == 1]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Merge dictionaries example\n    dict_a = {'a': 1, 'b': 2}\n    dict_b = {'b': 3, 'c': 4}\n    merged_dict = merge_dictionaries(dict_a, dict_b)\n    print(merged_dict)  # Outputs ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4})\n\n    # Count bytes in a string example\n    string_to_count = \"Hello, World!\"\n    bytes_count = count_bytes_in_string(string_to_count)\n    print(f\"Number of bytes in '{string_to_count}': {bytes_count}\")\n\n    # Filter non-unique elements from a list example\n    list_with_duplicates = [1, 2, 2, 3, 4, 5, 5]\n    unique_elements_list = filter_non_unique_elements(list_with_duplicates)\n    print(f\"Unique elements from the list: {unique_elements_list}\")\n",
    "tags": [
        "bytes",
        "ChainMap",
        "Comprehension",
        "Hard"
    ],
    "keywords": [
        "bytes",
        "ChainMap",
        "Comprehension"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}