{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytearray,bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef manipulate_byte_data(byte_data, value_to_add):\n    \"\"\"Manipulate byte data by adding a value to each byte.\n\n    This function takes a bytes or bytearray object, adds a given value to each byte, and returns a new bytearray object.\n\n    :param byte_data: The byte data to manipulate.\n    :type byte_data: bytes or bytearray\n    :param value_to_add: The value to add to each byte of the byte_data.\n    :type value_to_add: int\n    :return: A new bytearray with the value added to each byte.\n    :rtype: bytearray\n    :raises ValueError: If value_to_add is not between 0 and 255.\n\n    \"\"\"\n    if not (0 <= value_to_add <= 255):\n        raise ValueError(\"The value to add must be between 0 and 255.\")\n\n    if not isinstance(byte_data, (bytes, bytearray)):\n        raise TypeError(\"The first argument must be a bytes or bytearray object.\")\n\n    result = bytearray()\n    for byte in byte_data:\n        new_value = (byte + value_to_add) % 256\n        result.append(new_value)\n    return result\n\n\n# Example usage:\nif __name__ == '__main__':\n    original_data = bytes([50, 100, 150, 200])\n    value = 5\n    modified_data = manipulate_byte_data(original_data, value)\n    print(f\"Original data: {original_data}\")\n    print(f\"Modified data: {modified_data}\")\n",
    "tags": [
        "bytearray",
        "bytes",
        "Medium"
    ],
    "keywords": [
        "bytearray",
        "bytes"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}