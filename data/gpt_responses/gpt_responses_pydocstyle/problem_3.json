{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytearray,bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of bytearray and bytes.\n\nThis module provides functions to perform operations on bytearray and bytes objects,\nillustrating their usage and manipulation in Python.\n\"\"\"\n\n\ndef concatenate_bytes(byte_seq1, byte_seq2):\n    \"\"\"Concatenate two bytes objects and return the result.\n\n    This function takes two bytes objects, concatenates them, and returns a new bytes object.\n\n    :param byte_seq1: The first bytes object to concatenate.\n    :param byte_seq2: The second bytes object to concatenate.\n    :return: A new bytes object containing the concatenated result.\n    \"\"\"\n    return byte_seq1 + byte_seq2\n\n\ndef modify_bytearray(b_array, index, value):\n    \"\"\"Modify an element of a bytearray at a specified index.\n\n    This function changes the value of a bytearray at a given index with the new value provided.\n    It demonstrates the mutability of bytearray objects.\n\n    :param b_array: The bytearray to modify.\n    :param index: The index at which to modify the bytearray.\n    :param value: The new value to set at the specified index.\n    :return: The modified bytearray.\n    :raises IndexError: If the index is out of the range of the bytearray.\n    :raises ValueError: If the value is not within byte range (0-255).\n    \"\"\"\n    if not (0 <= value <= 255):\n        raise ValueError(\"Value must be in byte range (0-255).\")\n\n    b_array[index] = value\n    return b_array\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Working with bytes\n    bytes1 = bytes([1, 2, 3])\n    bytes2 = bytes([4, 5, 6])\n    concatenated_bytes = concatenate_bytes(bytes1, bytes2)\n    print(f\"Concatenated bytes: {concatenated_bytes}\")\n\n    # Working with bytearray\n    byte_array = bytearray([10, 20, 30, 40, 50])\n    modified_array = modify_bytearray(byte_array, 2, 99)\n    print(f\"Modified bytearray: {modified_array}\")\n",
    "tags": [
        "bytearray",
        "bytes",
        "Medium"
    ],
    "keywords": [
        "bytearray",
        "bytes"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}