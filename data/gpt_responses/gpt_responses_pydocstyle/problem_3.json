{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytearray,bytes.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef convert_string_to_bytearray(input_string):\n    \"\"\"Convert a string to a bytearray.\n\n    This function takes a string as input and converts it into a bytearray\n    which can be used for binary data manipulation.\n\n    :param input_string: The string to be converted.\n    :type input_string: str\n    :return: A bytearray representing the input string.\n    :rtype: bytearray\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n\n    return bytearray(input_string, 'utf-8')\n\n\ndef xor_bytearrays(bytearray1, bytearray2):\n    \"\"\"Perform XOR operation between two bytearrays.\n\n    This function takes two bytearrays and performs an XOR operation\n    between each pair of bytes. The bytearrays should be of the same length.\n\n    :param bytearray1: The first bytearray for the XOR operation.\n    :type bytearray1: bytearray\n    :param bytearray2: The second bytearray for the XOR operation.\n    :type bytearray2: bytearray\n    :return: A new bytearray containing the result of the XOR operation.\n    :rtype: bytearray\n    :raises ValueError: If the bytearrays are not of the same length.\n    \"\"\"\n    if len(bytearray1) != len(bytearray2):\n        raise ValueError(\"Bytearrays must be of the same length.\")\n\n    return bytearray(a ^ b for a, b in zip(bytearray1, bytearray2))\n\n\n# Example usage\nif __name__ == \"__main__\":\n    string1 = \"hello\"\n    string2 = \"world\"\n\n    bytearray1 = convert_string_to_bytearray(string1)\n    bytearray2 = convert_string_to_bytearray(string2)\n\n    xor_result = xor_bytearrays(bytearray1, bytearray2)\n    print(\"XOR Result:\", xor_result)\n",
    "tags": [
        "bytearray",
        "bytes",
        "Medium"
    ],
    "keywords": [
        "bytearray",
        "bytes"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}