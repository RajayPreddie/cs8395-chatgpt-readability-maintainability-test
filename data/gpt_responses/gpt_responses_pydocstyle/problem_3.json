{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytearray.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef bytearray_to_string(byte_array):\n    \"\"\"Convert a bytearray to a string using UTF-8 encoding.\n\n    This function takes a bytearray and converts it to a string using UTF-8 encoding.\n    It is assumed that the bytearray is valid and can be decoded using UTF-8.\n\n    :param byte_array: The bytearray to convert.\n    :type byte_array: bytearray\n    :return: The resulting string after decoding.\n    :rtype: str\n    :raises ValueError: If the bytearray cannot be decoded using UTF-8.\n    \n    \"\"\"\n    try:\n        return byte_array.decode('utf-8')\n    except UnicodeDecodeError as e:\n        raise ValueError(\"The bytearray cannot be decoded using UTF-8.\") from e\n\n\ndef string_to_bytearray(string):\n    \"\"\"Convert a string to a bytearray using UTF-8 encoding.\n\n    This function takes a string and converts it to a bytearray using UTF-8 encoding.\n\n    :param string: The string to convert.\n    :type string: str\n    :return: The resulting bytearray after encoding.\n    :rtype: bytearray\n    \"\"\"\n    return bytearray(string, 'utf-8')\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Convert a string to bytearray\n    original_string = \"Hello, World!\"\n    byte_array = string_to_bytearray(original_string)\n    print(f\"String to bytearray: {byte_array}\")\n\n    # Convert bytearray back to string\n    converted_string = bytearray_to_string(byte_array)\n    print(f\"Bytearray to string: {converted_string}\")\n",
    "tags": [
        "bytearray",
        "Easy"
    ],
    "keywords": [
        "bytearray"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}