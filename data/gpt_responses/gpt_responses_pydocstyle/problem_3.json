{
    "id": "problem_3",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: bytearray.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef reverse_bytearray(data):\n    \"\"\"Reverse the contents of a bytearray.\n\n    This function takes a bytearray and returns a new bytearray with the contents\n    in reverse order.\n\n    :param data: The bytearray to reverse.\n    :type data: bytearray\n    :return: A new bytearray with the contents of 'data' reversed.\n    :rtype: bytearray\n    \"\"\"\n    return bytearray(reversed(data))\n\n\ndef main():\n    \"\"\"Run the main function of the module.\n\n    This function demonstrates the use of the `reverse_bytearray` function\n    by creating a bytearray, reversing it, and printing both the original\n    and reversed versions.\n    \"\"\"\n    original_data = bytearray('This is a test', 'utf-8')\n    print(f\"Original bytearray: {original_data}\")\n\n    reversed_data = reverse_bytearray(original_data)\n    print(f\"Reversed bytearray: {reversed_data}\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "bytearray",
        "Easy"
    ],
    "keywords": [
        "bytearray"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}