{
    "id": "problem_9",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Include a module-level docstring as per pydocstyle guidelines. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Coroutine,Counter,Decorator.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\n\"\"\"Module for demonstrating the use of Coroutine, Counter, and Decorator.\n\nThis module provides examples of how to implement and use a coroutine,\na Counter collection, and a decorator in Python, while adhering to\npydocstyle standards for docstrings.\n\"\"\"\n\nfrom collections import Counter\nfrom functools import wraps\n\n\ndef coroutine(func):\n    \"\"\"Decorator to prime a coroutine function by advancing to its first yield.\n\n    :param func: The coroutine function to be primed.\n    :return: The primed coroutine function.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        cr = func(*args, **kwargs)\n        next(cr)\n        return cr\n    return wrapper\n\n\n@coroutine\ndef tally():\n    \"\"\"Coroutine for tallying occurrences of items sent to it.\n\n    Yields:\n        None, but updates an internal Counter of items received.\n    \"\"\"\n    counts = Counter()\n    try:\n        while True:\n            item = yield\n            counts[item] += 1\n            print(f\"Current tally: {counts}\")\n    except GeneratorExit:\n        print(f\"Final tally: {counts}\")\n\n\ndef with_logging(func):\n    \"\"\"Decorator to add simple logging before and after a function call.\n\n    :param func: The function to decorate.\n    :return: The decorated function with logging.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print(f\"Calling function '{func.__name__}' with arguments {args} and keyword arguments {kwargs}\")\n        result = func(*args, **kwargs)\n        print(f\"Function '{func.__name__}' returned {result}\")\n        return result\n    return wrapper\n\n\n@with_logging\ndef multiply_numbers(x, y):\n    \"\"\"Multiply two numbers and return the result.\n\n    :param x: The first number to multiply.\n    :param y: The second number to multiply.\n    :return: The product of x and y.\n    \"\"\"\n    return x * y\n\n\nif __name__ == \"__main__\":\n    # Example usage of the coroutine\n    tally_counter = tally()\n    for item in ['apple', 'banana', 'apple', 'orange', 'banana']:\n        tally_counter.send(item)\n    tally_counter.close()\n\n    # Example usage of the decorator\n    product = multiply_numbers(5, 7)\n    print(f\"The product of 5 and 7 is {product}\")\n",
    "tags": [
        "Coroutine",
        "Counter",
        "Decorator",
        "Hard"
    ],
    "keywords": [
        "Coroutine",
        "Counter",
        "Decorator"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}