{
    "id": "problem_9",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Coroutine.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nclass AsyncCalculator:\n    \"\"\"Asynchronous calculator for performing basic arithmetic operations.\n\n    This class demonstrates the use of coroutines for performing asynchronous\n    computation. It provides basic arithmetic operations like addition and\n    subtraction.\n    \"\"\"\n\n    async def add(self, x, y):\n        \"\"\"Asynchronously add two numbers and return the result.\n\n        This coroutine adds two numbers with a simulated delay to mimic a\n        time-consuming operation.\n\n        :param x: The first number to add.\n        :param y: The second number to add.\n        :return: The sum of x and y after a delay.\n        \"\"\"\n        await asyncio.sleep(1)  # Simulate a time-consuming operation\n        return x + y\n\n    async def subtract(self, x, y):\n        \"\"\"Asynchronously subtract one number from another and return the result.\n\n        This coroutine subtracts the second number from the first with a simulated\n        delay to mimic a time-consuming operation.\n\n        :param x: The number from which to subtract.\n        :param y: The number to subtract.\n        :return: The difference of x and y after a delay.\n        \"\"\"\n        await asyncio.sleep(1)  # Simulate a time-consuming operation\n        return x - y\n\n\nasync def main():\n    \"\"\"Main function to demonstrate the use of the AsyncCalculator class.\"\"\"\n    calculator = AsyncCalculator()\n    result_add = await calculator.add(10, 5)\n    print(f\"The result of addition is: {result_add}\")\n\n    result_subtract = await calculator.subtract(10, 5)\n    print(f\"The result of subtraction is: {result_subtract}\")\n\n\n# Run the main function in the asyncio event loop\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "Coroutine",
        "Easy"
    ],
    "keywords": [
        "Coroutine"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}