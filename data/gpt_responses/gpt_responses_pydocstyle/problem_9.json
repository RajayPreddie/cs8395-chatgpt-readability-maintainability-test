{
    "id": "problem_9",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Coroutine.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport asyncio\n\nasync def fetch_data():\n    \"\"\"Simulate fetching data from a remote source asynchronously.\n\n    This coroutine simulates a delay as if it was fetching data from a remote source.\n\n    :return: A dictionary representing fetched data.\n    \"\"\"\n    print(\"Start fetching...\")\n    await asyncio.sleep(2)  # Simulate a network delay\n    print(\"Data fetched.\")\n    return {\"data\": \"Sample data\"}\n\nasync def process_data():\n    \"\"\"Process data fetched from a remote source.\n\n    This coroutine waits for the data to be fetched and then processes it.\n\n    :return: A string indicating the processing result.\n    \"\"\"\n    data = await fetch_data()\n    print(\"Processing data...\")\n    await asyncio.sleep(1)  # Simulate data processing delay\n    return f\"Data processed: {data['data']}\"\n\nasync def main():\n    \"\"\"Run the main event loop.\n\n    This is the entry point for running the asynchronous functions defined above.\n    \"\"\"\n    result = await process_data()\n    print(result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "Coroutine",
        "Easy"
    ],
    "keywords": [
        "Coroutine"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "pydocstyle"
}