{
    "id": "problem_11",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Decorator,DefaultDict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom functools import wraps\n\ndef count_calls(func):\n    \"\"\"Decorator that counts the number of times a function is called.\n\n    The count of calls is stored in a defaultdict(int).\n\n    :param func: The function to count calls for.\n    :return: The wrapped function with call counting.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        wrapper.calls[func.__name__] += 1\n        return func(*args, **kwargs)\n\n    wrapper.calls = defaultdict(int)\n    return wrapper\n\n@count_calls\ndef fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\n\n    Uses a simple recursive algorithm which is not efficient for large n.\n\n    :param n: The position in the Fibonacci sequence.\n    :return: The nth Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == \"__main__\":\n    # Example usage of the decorated Fibonacci function\n    print(f\"Fibonacci number at position 5: {fibonacci(5)}\")\n    print(f\"Function 'fibonacci' was called {fibonacci.calls['fibonacci']} times.\")\n",
    "tags": [
        "Decorator",
        "DefaultDict",
        "Medium"
    ],
    "keywords": [
        "Decorator",
        "DefaultDict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}