{
    "id": "problem_11",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Decorator,DefaultDict.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nfrom collections import defaultdict\nfrom functools import wraps\n\ndef count_calls(func):\n    \"\"\"Decorator that counts the number of times a function is called.\n\n    The count is stored in a defaultdict.\n\n    :param func: The function to be decorated.\n    :return: The wrapped function.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        wrapper.calls[func.__name__] += 1\n        return func(*args, **kwargs)\n\n    wrapper.calls = defaultdict(int)\n    return wrapper\n\n@count_calls\ndef multiply_numbers(x, y):\n    \"\"\"Multiply two numbers and return the result.\n\n    :param x: The first number to multiply.\n    :param y: The second number to multiply.\n    :return: The product of x and y.\n    \"\"\"\n    return x * y\n\n@count_calls\ndef subtract_numbers(x, y):\n    \"\"\"Subtract the second number from the first and return the result.\n\n    :param x: The number from which to subtract.\n    :param y: The number to subtract.\n    :return: The difference of x and y.\n    \"\"\"\n    return x - y\n\n# Example usage:\n# result = multiply_numbers(3, 4)\n# print(f\"3 * 4 = {result}\")\n# print(f\"multiply_numbers was called {multiply_numbers.calls['multiply_numbers']} times\")\n\n# result = subtract_numbers(10, 5)\n# print(f\"10 - 5 = {result}\")\n# print(f\"subtract_numbers was called {subtract_numbers.calls['subtract_numbers']} times\")\n",
    "tags": [
        "Decorator",
        "DefaultDict",
        "Medium"
    ],
    "keywords": [
        "Decorator",
        "DefaultDict"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}