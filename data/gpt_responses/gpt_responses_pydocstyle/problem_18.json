{
    "id": "problem_18",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\n\nclass NumberStream:\n    \"\"\"A class to demonstrate the usage of a generator and global state.\n\n    This class maintains a global state of numbers and uses a generator to\n    provide numbers in a heap-based priority queue fashion.\n\n    Attributes:\n        _numbers (list): A private heap of numbers.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the NumberStream with an empty heap.\"\"\"\n        self._numbers = []\n\n    def add_number(self, number):\n        \"\"\"Add a number to the heap.\n\n        :param number: The number to be added to the heap.\n        \"\"\"\n        heapq.heappush(self._numbers, number)\n\n    def get_numbers_generator(self):\n        \"\"\"Provide a generator to yield numbers from the heap in sorted order.\n\n        :yields: The next smallest number from the heap.\n        \"\"\"\n        while self._numbers:\n            yield heapq.heappop(self._numbers)\n\n\ndef consume_number_stream(number_stream):\n    \"\"\"Consume numbers from a NumberStream and print them.\n\n    :param number_stream: An instance of NumberStream to consume.\n    \"\"\"\n    for number in number_stream.get_numbers_generator():\n        print(number)\n\n\n# Example usage:\n\n# Create a NumberStream instance\nstream = NumberStream()\n\n# Add some numbers to the stream\nstream.add_number(10)\nstream.add_number(5)\nstream.add_number(1)\nstream.add_number(7)\n\n# Consume and print numbers from the stream\nconsume_number_stream(stream)\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}