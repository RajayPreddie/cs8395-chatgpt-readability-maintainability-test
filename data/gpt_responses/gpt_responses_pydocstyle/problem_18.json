{
    "id": "problem_18",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: Generator,Global state,heapq.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\nimport heapq\n\nclass GlobalState:\n    \"\"\"Global state class to maintain a min-heap of numbers.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the GlobalState with an empty heap.\"\"\"\n        self.heap = []\n\n    def add_number(self, number):\n        \"\"\"Add a number to the heap.\n\n        :param number: The number to be added to the heap.\n        \"\"\"\n        heapq.heappush(self.heap, number)\n\n    def get_min(self):\n        \"\"\"Get the smallest number from the heap.\n\n        :return: The smallest number from the heap, or None if heap is empty.\n        \"\"\"\n        return self.heap[0] if self.heap else None\n\n\ndef number_generator(limit):\n    \"\"\"Generate numbers up to a given limit.\n\n    This is a simple generator that yields numbers from 0 up to the limit.\n\n    :param limit: The upper limit for the numbers to generate.\n    :yield: The next number in the sequence.\n    \"\"\"\n    for number in range(limit):\n        yield number\n\n\ndef main():\n    \"\"\"Main function to demonstrate usage of GlobalState and number_generator.\"\"\"\n    global_state = GlobalState()\n    limit = 10\n\n    for number in number_generator(limit):\n        global_state.add_number(number)\n\n    print(\"The smallest number in the heap is:\", global_state.get_min())\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "pydocstyle"
}