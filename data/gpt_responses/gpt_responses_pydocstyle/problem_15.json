{
    "id": "problem_15",
    "description": "Act as a Python developer and write a Python program that strictly adheres to the pydocstyle standard for docstrings. Here's an example snippet:\n\n\"\"\"Module for demonstrating pydocstyle adherence.\n\nThis module provides examples of how to write docstrings that conform to pydocstyle standards.\n\"\"\"\n\ndef add_numbers(x, y):\n    \"\"\"Add two numbers and return the result.\n\n    :param x: The first number to add.\n    :param y: The second number to add.\n    :return: The sum of x and y.\n    \"\"\"\n    return x + y\n\nFocus on comprehensive and compliant docstring documentation. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keyword(s) to solve a problem with Python: dict,frozenset.Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Do not output in Markdown format.\n\n",
    "code": "\ndef merge_dictionaries(dict1, dict2):\n    \"\"\"Merge two dictionaries into a new dictionary as a shallow copy.\n\n    This function takes two dictionaries and merges them into a single dictionary. If there is an\n    overlap in keys, the values from the second dictionary will be used.\n\n    :param dict1: The first dictionary to merge.\n    :type dict1: dict\n    :param dict2: The second dictionary to merge, whose values will override dict1's in case of key collisions.\n    :type dict2: dict\n    :return: A new dictionary containing the merged key-value pairs.\n    :rtype: dict\n    \"\"\"\n    merged_dict = dict1.copy()  # Start with a shallow copy of dict1\n    merged_dict.update(dict2)   # Update with key-value pairs from dict2\n    return merged_dict\n\ndef find_items_with_unique_values(input_dict):\n    \"\"\"Return a frozenset of items from the input dictionary with unique values.\n\n    This function identifies all items in the input dictionary that have unique values and returns\n    them as a frozenset. This can be useful for ensuring that certain properties or identifiers\n    are indeed unique.\n\n    :param input_dict: The dictionary to process.\n    :type input_dict: dict\n    :return: A frozenset containing the (key, value) pairs from the dictionary that have unique values.\n    :rtype: frozenset\n    \"\"\"\n    # Invert the dictionary to group by values, then select the values that appear exactly once\n    value_to_keys = {}\n    for key, value in input_dict.items():\n        value_to_keys.setdefault(value, []).append(key)\n    unique_values = {key for key, value in input_dict.items() if len(value_to_keys[value]) == 1}\n    return frozenset((key, input_dict[key]) for key in unique_values)\n\n# Example usage:\nif __name__ == '__main__':\n    # Merge dictionaries example\n    dict_a = {'a': 1, 'b': 2, 'c': 3}\n    dict_b = {'b': 4, 'c': 5, 'd': 6}\n    merged_dict = merge_dictionaries(dict_a, dict_b)\n    print(\"Merged Dictionary:\", merged_dict)\n\n    # Find items with unique values example\n    items_with_unique_values = find_items_with_unique_values(merged_dict)\n    print(\"Items with Unique Values:\", items_with_unique_values)\n",
    "tags": [
        "dict",
        "frozenset",
        "Medium"
    ],
    "keywords": [
        "dict",
        "frozenset"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "pydocstyle"
}