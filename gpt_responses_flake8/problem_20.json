{
    "id": "problem_20",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: heapq,IdiomaticPython,Introspection. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import heapq\n\ndef find_top_elements(numbers, n=3):\n    \"\"\"Find the top n elements in a list using heapq.\"\"\"\n    # IdiomaticPython: using nlargest from heapq for better performance\n    # on finding the largest elements without sorting the entire list\n    if not numbers or n <= 0:\n        return None\n    return heapq.nlargest(n, numbers)\n\n# Introspection: dynamically determine the number of top elements to find\ndef determine_n():\n    \"\"\"Determine the value of n based on user input or default to 3.\"\"\"\n    # Use introspection to get the default value of n from the function\n    default_n = find_top_elements.__defaults__[0]\n    try:\n        n = int(input(f\"Enter the number of top elements to find (default is {default_n}): \"))\n        if n <= 0:\n            raise ValueError\n    except (ValueError, TypeError):\n        print(f\"Invalid input. Using default value of {default_n}.\")\n        n = default_n\n    return n\n\ndef main():\n    # Example usage\n    numbers = [10, 1, 5, 7, 3, 2, 8, 4, 6, 9]\n    n = determine_n()\n    top_elements = find_top_elements(numbers, n)\n    print(f\"The top {n} elements in the list are: {top_elements}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "heapq",
        "IdiomaticPython",
        "Introspection",
        "Hard"
    ],
    "keywords": [
        "heapq",
        "IdiomaticPython",
        "Introspection"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "flake8"
}