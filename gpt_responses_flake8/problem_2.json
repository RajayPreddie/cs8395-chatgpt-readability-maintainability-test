{
    "id": "problem_2",
    "description": "Act as a Python developer and create a Python program that adheres to the flake8 coding standard. Here's an example snippet:\n\n# Example Snippet for Flake8\ndef find_max(numbers):\n    \"\"\"Find the maximum number in a list.\"\"\"\n    return max(numbers) if numbers else None\n\nEnsure your code is clean, readable, and adheres to flake8 standards. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: asyncio. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import asyncio\n\n# Define an asynchronous function to find the maximum in a list\nasync def find_max_async(numbers):\n    \"\"\"Find the maximum number in a list asynchronously.\"\"\"\n    await asyncio.sleep(0.1)  # Simulating an async operation\n    return max(numbers) if numbers else None\n\n# Define the main coroutine that will get the event loop and run the async function\nasync def main():\n    numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    max_number = await find_max_async(numbers)\n    print(f\"The maximum number in the list is: {max_number}\")\n\n# Run the main coroutine\nif __name__ == \"__main__\":\n    asyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "flake8"
}