{
    "id": "problem_20",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: heapq,IdiomaticPython,Introspection. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import heapq\n\ndef find_largest_elements(numbers, k):\n    \"\"\"\n    This function takes a list of numbers and an integer k, and returns the k largest numbers in the list\n    using the heapq module for efficient heap queue algorithm implementations.\n    \"\"\"\n    # Using nlargest from heapq to find the k largest elements in the list\n    return heapq.nlargest(k, numbers)\n\ndef main():\n    # Example usage\n    numbers = [12, 5, 1, 89, 64, 23, 11, 28, 33, 7]\n    k = 3\n\n    # Using introspection to ensure the input list is indeed a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"The input must be a list.\")\n\n    # Ensuring idiomatic Python by using a guard clause for the input check\n    largest_elements = find_largest_elements(numbers, k)\n    \n    # Displaying the result\n    print(f\"The {k} largest elements are: {largest_elements}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "tags": [
        "heapq",
        "IdiomaticPython",
        "Introspection",
        "Hard"
    ],
    "keywords": [
        "heapq",
        "IdiomaticPython",
        "Introspection"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}