{
    "id": "problem_12",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: DefaultDict,DependencyInjection. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "from collections import defaultdict\nfrom typing import Callable, Dict, List\n\nclass DependencyInjector:\n    def __init__(self):\n        self._providers = defaultdict(lambda: None)\n\n    def add_dependency(self, name: str, provider: Callable):\n        self._providers[name] = provider\n\n    def get_dependency(self, name: str):\n        provider = self._providers[name]\n        if not provider:\n            raise ValueError(f\"No provider found for dependency named '{name}'\")\n        return provider()\n\n# Example usage of DependencyInjector with a list\n\n# Define a function that provides a list of numbers\ndef provide_number_list() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\n# Create an instance of DependencyInjector\ndi = DependencyInjector()\n\n# Add the 'number_list' dependency with the provide_number_list function\ndi.add_dependency('number_list', provide_number_list)\n\n# Now let's use the dependency in a function\ndef process_numbers(di: DependencyInjector):\n    # Get the list of numbers from the dependency injector\n    numbers = di.get_dependency('number_list')\n    \n    # Perform some operations on the list (for example, calculate the sum)\n    total = sum(numbers)\n    print(f\"The sum of the list is: {total}\")\n\n# Call the function that uses the dependency injector\nprocess_numbers(di)\n",
    "tags": [
        "DefaultDict",
        "DependencyInjection",
        "Medium"
    ],
    "keywords": [
        "DefaultDict",
        "DependencyInjection"
    ],
    "difficulty": "Medium",
    "prompt_style_adherence": "default"
}