{
    "id": "problem_18",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: Generator,Global state,heapq. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import heapq\n\n# This generator function will yield the smallest items from the global list `numbers`\ndef smallest_numbers():\n    global numbers  # Reference the global state\n    heapq.heapify(numbers)  # Heapify the list to allow efficient retrieval of smallest items\n\n    while numbers:  # Continue yielding until the list is empty\n        yield heapq.heappop(numbers)  # Pop and yield the smallest item from the heap\n\n# Global state: a list of numbers\nnumbers = [15, 3, 12, 6, 9, 0, -5, 8, 2, 7]\n\n# Example usage of the generator\nif __name__ == \"__main__\":\n    # Create the generator object\n    gen = smallest_numbers()\n\n    # Iterate through the generator and print each value\n    for number in gen:\n        print(number)\n",
    "tags": [
        "Generator",
        "Global state",
        "heapq",
        "Hard"
    ],
    "keywords": [
        "Generator",
        "Global state",
        "heapq"
    ],
    "difficulty": "Hard",
    "prompt_style_adherence": "default"
}