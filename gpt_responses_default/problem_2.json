{
    "id": "problem_2",
    "description": "Act as a Python developer and create a Python program. Ensure your code is clean and readable. Return only the raw code for the Python program, ensuring it's functional and follows Python best practices. Verify the program's correctness as if using a Command Line Interface. Use the following keywords to solve a problem with Python: asyncio. Remember to only respond with the raw code for the Python program. Generate a Python program that uses a list and return only the raw code. If you have explanations or comments, include them in the code as comments.\n",
    "code": "import asyncio\n\n# This function simulates a task that takes some time to complete\n# It prints a message before and after sleeping for a given duration\nasync def do_work(item, duration):\n    print(f\"Starting work on item: {item}\")\n    await asyncio.sleep(duration)\n    print(f\"Finished work on item: {item}\")\n\n# This is the main coroutine that schedules all other tasks\nasync def main():\n    # List of items to process\n    items = ['item1', 'item2', 'item3', 'item4', 'item5']\n    # List of durations for each task\n    durations = [1, 2, 3, 2, 1]\n    \n    # Create a list of task coroutines, each with its corresponding item and duration\n    tasks = [do_work(item, duration) for item, duration in zip(items, durations)]\n    \n    # Schedule all tasks to run concurrently\n    await asyncio.gather(*tasks)\n\n# Run the main coroutine\nasyncio.run(main())\n",
    "tags": [
        "asyncio",
        "Easy"
    ],
    "keywords": [
        "asyncio"
    ],
    "difficulty": "Easy",
    "prompt_style_adherence": "default"
}